This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by configure, which was
generated by GNU Autoconf 2.72.  Invocation command line was

  $ ./configure

## --------- ##
## Platform. ##
## --------- ##

hostname = krypton
uname -m = amd64
uname -r = 4
uname -s = Plan9
uname -v = 0

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /bin/
PATH: ./


## ----------- ##
## Core tests. ##
## ----------- ##

configure:3056: looking for aux files: install-sh config.guess config.sub
configure:3069:  trying ./build-aux/
configure:3080:   ./build-aux/install-sh found
configure:3098:   ./build-aux/config.guess found
configure:3098:   ./build-aux/config.sub found
configure:3281: checking for xsltproc
configure:3318: result: false
configure:3419: checking for gcc
configure:3455: result: no
configure:3524: checking for cc
configure:3550: found /bin/cc
configure:3574: result: cc
configure:3811: checking for C compiler version
configure:3820: cc --version >&5
cc: flag -- ignored
cc: flag -e ignored
cc: flag -r ignored
cc: flag -i ignored
cc: no files to compile or load
configure:3831: $? = 1
configure:3820: cc -v >&5
cc: no files to compile or load
configure:3831: $? = 1
configure:3820: cc -V >&5
cc: flag -V ignored
cc: no files to compile or load
configure:3831: $? = 1
configure:3820: cc -qversion >&5
cc: flag -q ignored
cc: flag -e ignored
cc: flag -r ignored
cc: flag -i ignored
cc: no files to compile or load
configure:3831: $? = 1
configure:3820: cc -version >&5
cc: flag -e ignored
cc: flag -r ignored
cc: flag -i ignored
cc: no files to compile or load
configure:3831: $? = 1
configure:3851: checking whether the C compiler works
configure:3873: cc    conftest.c  >&5
configure:3877: $? = 0
configure:3928: result: yes
configure:3932: checking for C compiler default output file name
configure:3934: result: a.out
configure:3940: checking for suffix of executables
configure:3947: cc -o conftest    conftest.c  >&5
configure:3951: $? = 0
configure:3975: result: 
configure:3999: checking whether we are cross compiling
configure:4007: cc -o conftest    conftest.c  >&5
configure:4011: $? = 0
configure:4018: ./conftest
configure:4022: $? = 0
configure:4037: result: no
configure:4043: checking for suffix of object files
configure:4066: cc -c   conftest.c >&5
configure:4070: $? = 0
configure:4094: result: o
configure:4098: checking whether the compiler supports GNU C
configure:4118: cc -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:14[stdin:15] syntax error, last name: me
configure:4118: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:4130: result: no
configure:4141: checking whether cc accepts -g
configure:4162: cc -c -g  conftest.c >&5
configure:4162: $? = 0
configure:4209: result: yes
configure:4229: checking for cc option to enable C11 features
configure:4244: cc  -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:184[stdin:253] syntax error, last name: __func__$9
configure:4244: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| /* Does the compiler advertise C11 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 201112L
| # error "Compiler does not advertise C11 conformance"
| #endif
| 
| // Check _Alignas.
| char _Alignas (double) aligned_as_double;
| char _Alignas (0) no_special_alignment;
| extern char aligned_as_int;
| char _Alignas (0) _Alignas (int) aligned_as_int;
| 
| // Check _Alignof.
| enum
| {
|   int_alignment = _Alignof (int),
|   int_array_alignment = _Alignof (int[100]),
|   char_alignment = _Alignof (char)
| };
| _Static_assert (0 < -_Alignof (int), "_Alignof is signed");
| 
| // Check _Noreturn.
| int _Noreturn does_not_return (void) { for (;;) continue; }
| 
| // Check _Static_assert.
| struct test_static_assert
| {
|   int x;
|   _Static_assert (sizeof (int) <= sizeof (long int),
|                   "_Static_assert does not work in struct");
|   long int y;
| };
| 
| // Check UTF-8 literals.
| #define u8 syntax error!
| char const utf8_literal[] = u8"happens to be ASCII" "another string";
| 
| // Check duplicate typedefs.
| typedef long *long_ptr;
| typedef long int *long_ptr;
| typedef long_ptr long_ptr;
| 
| // Anonymous structures and unions -- taken from C11 6.7.2.1 Example 1.
| struct anonymous
| {
|   union {
|     struct { int i; int j; };
|     struct { int k; long int l; } w;
|   };
|   int m;
| } v1;
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   
|   _Static_assert ((offsetof (struct anonymous, i)
| 		   == offsetof (struct anonymous, w.k)),
| 		  "Anonymous union alignment botch");
|   v1.i = 2;
|   v1.w.k = 5;
|   ok |= v1.i != 5;
| 
|   return ok;
| }
| 
configure:4244: cc -std=gnu11 -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:184[stdin:253] syntax error, last name: __func__$9
configure:4244: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| /* Does the compiler advertise C11 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 201112L
| # error "Compiler does not advertise C11 conformance"
| #endif
| 
| // Check _Alignas.
| char _Alignas (double) aligned_as_double;
| char _Alignas (0) no_special_alignment;
| extern char aligned_as_int;
| char _Alignas (0) _Alignas (int) aligned_as_int;
| 
| // Check _Alignof.
| enum
| {
|   int_alignment = _Alignof (int),
|   int_array_alignment = _Alignof (int[100]),
|   char_alignment = _Alignof (char)
| };
| _Static_assert (0 < -_Alignof (int), "_Alignof is signed");
| 
| // Check _Noreturn.
| int _Noreturn does_not_return (void) { for (;;) continue; }
| 
| // Check _Static_assert.
| struct test_static_assert
| {
|   int x;
|   _Static_assert (sizeof (int) <= sizeof (long int),
|                   "_Static_assert does not work in struct");
|   long int y;
| };
| 
| // Check UTF-8 literals.
| #define u8 syntax error!
| char const utf8_literal[] = u8"happens to be ASCII" "another string";
| 
| // Check duplicate typedefs.
| typedef long *long_ptr;
| typedef long int *long_ptr;
| typedef long_ptr long_ptr;
| 
| // Anonymous structures and unions -- taken from C11 6.7.2.1 Example 1.
| struct anonymous
| {
|   union {
|     struct { int i; int j; };
|     struct { int k; long int l; } w;
|   };
|   int m;
| } v1;
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   
|   _Static_assert ((offsetof (struct anonymous, i)
| 		   == offsetof (struct anonymous, w.k)),
| 		  "Anonymous union alignment botch");
|   v1.i = 2;
|   v1.w.k = 5;
|   ok |= v1.i != 5;
| 
|   return ok;
| }
| 
configure:4258: result: unsupported
configure:4278: checking for cc option to enable C99 features
configure:4293: cc  -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:217[stdin:286] array size must be a positive constant
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:213[stdin:282] incompatible types: "IND CONST USHORT" and "IND UINT" for op "AS"
configure:4293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4293: cc -std=gnu99 -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:217[stdin:286] array size must be a positive constant
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:213[stdin:282] incompatible types: "IND CONST USHORT" and "IND UINT" for op "AS"
configure:4293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4293: cc -std=c99 -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:217[stdin:286] array size must be a positive constant
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:213[stdin:282] incompatible types: "IND CONST USHORT" and "IND UINT" for op "AS"
configure:4293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4293: cc -c99 -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:217[stdin:286] array size must be a positive constant
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:213[stdin:282] incompatible types: "IND CONST USHORT" and "IND UINT" for op "AS"
configure:4293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4293: cc -qlanglvl=extc1x -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:217[stdin:286] array size must be a positive constant
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:213[stdin:282] incompatible types: "IND CONST USHORT" and "IND UINT" for op "AS"
configure:4293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4293: cc -qlanglvl=extc99 -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:217[stdin:286] array size must be a positive constant
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:213[stdin:282] incompatible types: "IND CONST USHORT" and "IND UINT" for op "AS"
configure:4293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4293: cc -AC99 -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:217[stdin:286] array size must be a positive constant
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:213[stdin:282] incompatible types: "IND CONST USHORT" and "IND UINT" for op "AS"
configure:4293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4293: cc -D_STDC_C99= -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:217[stdin:286] array size must be a positive constant
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:213[stdin:282] incompatible types: "IND CONST USHORT" and "IND UINT" for op "AS"
configure:4293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (char **p, int i)
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* C89 style stringification. */
| #define noexpand_stringify(a) #a
| const char *stringified = noexpand_stringify(arbitrary+token=sequence);
| 
| /* C89 style token pasting.  Exercises some of the corner cases that
|    e.g. old MSVC gets wrong, but not very hard. */
| #define noexpand_concat(a,b) a##b
| #define expand_concat(a,b) noexpand_concat(a,b)
| extern int vA;
| extern int vbee;
| #define aye A
| #define bee B
| int *pvA = &expand_concat(v,aye);
| int *pvbee = &noexpand_concat(v,bee);
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| /* Does the compiler advertise C99 conformance? */
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| // See if C++-style comments work.
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| extern void free (void *);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
|   // Work around memory leak warnings.
|   free (ia);
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:4307: result: unsupported
configure:4327: checking for cc option to enable C89 features
configure:4342: cc  -c   conftest.c >&5
configure:4342: $? = 0
configure:4361: result: none needed
configure:4384: checking whether compiler is MSVC
configure:4405: cc -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:15[stdin:16] syntax error, last name: fail
configure:4405: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #ifndef _MSC_VER
|   int fail-1;
| #endif
| 
|   ;
|   return 0;
| }
configure:4415: result: no
configure:4430: checking whether compiler is cray
configure:4451: cc -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:15[stdin:16] syntax error, last name: fail
configure:4451: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #ifndef _CRAYC
|   int fail-1;
| #endif
| 
|   ;
|   return 0;
| }
configure:4461: result: no
configure:5754: checking how to run the C preprocessor
configure:5780: cc -E  conftest.c
configure:5780: $? = 0
configure:5796: cc -E  conftest.c
configure:5796: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5825: result: cc -E
configure:5839: cc -E  conftest.c
configure:5839: $? = 0
configure:5855: cc -E  conftest.c
configure:5855: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:6043: checking for g++
configure:6079: result: no
configure:6043: checking for c++
configure:6079: result: no
configure:6043: checking for gpp
configure:6079: result: no
configure:6043: checking for aCC
configure:6079: result: no
configure:6043: checking for CC
configure:6079: result: no
configure:6043: checking for cxx
configure:6079: result: no
configure:6043: checking for cc++
configure:6079: result: no
configure:6043: checking for cl.exe
configure:6079: result: no
configure:6043: checking for FCC
configure:6079: result: no
configure:6043: checking for KCC
configure:6079: result: no
configure:6043: checking for RCC
configure:6079: result: no
configure:6043: checking for xlC_r
configure:6079: result: no
configure:6043: checking for xlC
configure:6079: result: no
configure:6043: checking for clang++
configure:6079: result: no
configure:6103: checking for C++ compiler version
configure:6112: g++ --version >&5
./configure: g++: not found
configure:6123: $? = 127
configure:6112: g++ -v >&5
./configure: g++: not found
configure:6123: $? = 127
configure:6112: g++ -V >&5
./configure: g++: not found
configure:6123: $? = 127
configure:6112: g++ -qversion >&5
./configure: g++: not found
configure:6123: $? = 127
configure:6127: checking whether the compiler supports GNU C++
configure:6147: g++ -c   conftest.cpp >&5
configure:6147: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:6159: result: no
configure:6170: checking whether g++ accepts -g
configure:6191: g++ -c -g  conftest.cpp >&5
configure:6191: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
|   ;
|   return 0;
| }
configure:6207: g++ -c   conftest.cpp >&5
configure:6207: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
|   ;
|   return 0;
| }
configure:6224: g++ -c -g  conftest.cpp >&5
configure:6224: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
|   ;
|   return 0;
| }
configure:6238: result: no
configure:6258: checking for g++ option to enable C++11 features
configure:6273: g++  -c   conftest.cpp >&5
configure:6273: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:6273: g++ -std=gnu++11 -c   conftest.cpp >&5
configure:6273: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:6273: g++ -std=gnu++0x -c   conftest.cpp >&5
configure:6273: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:6273: g++ -std=c++11 -c   conftest.cpp >&5
configure:6273: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:6273: g++ -std=c++0x -c   conftest.cpp >&5
configure:6273: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:6273: g++ -qlanglvl=extended0x -c   conftest.cpp >&5
configure:6273: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:6273: g++ -AA -c   conftest.cpp >&5
configure:6273: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:6287: result: unsupported
configure:6307: checking for g++ option to enable C++98 features
configure:6322: g++  -c   conftest.cpp >&5
configure:6322: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:6322: g++ -std=gnu++98 -c   conftest.cpp >&5
configure:6322: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:6322: g++ -std=c++98 -c   conftest.cpp >&5
configure:6322: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:6322: g++ -qlanglvl=extended -c   conftest.cpp >&5
configure:6322: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:6322: g++ -AA -c   conftest.cpp >&5
configure:6322: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:6336: result: unsupported
configure:6376: checking whether g++ supports C++17 features with -std=c++17
configure:7173: g++ -std=c++17 -c   conftest.cpp >&5
configure:7173: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7185: result: no
configure:6376: checking whether g++ supports C++17 features with +std=c++17
configure:7173: g++ +std=c++17 -c   conftest.cpp >&5
configure:7173: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7185: result: no
configure:6376: checking whether g++ supports C++17 features with -h std=c++17
configure:7173: g++ -h std=c++17 -c   conftest.cpp >&5
configure:7173: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7185: result: no
configure:6376: checking whether g++ supports C++17 features with -std=c++1z
configure:7173: g++ -std=c++1z -c   conftest.cpp >&5
configure:7173: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7185: result: no
configure:6376: checking whether g++ supports C++17 features with +std=c++1z
configure:7173: g++ +std=c++1z -c   conftest.cpp >&5
configure:7173: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7185: result: no
configure:6376: checking whether g++ supports C++17 features with -h std=c++1z
configure:7173: g++ -h std=c++1z -c   conftest.cpp >&5
configure:7173: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus < 201703L
| 
| 
| 
configure:7185: result: no
configure:7214: No compiler with C++17 support was found
configure:7239: checking whether g++ supports C++14 features with -std=c++14
configure:7658: g++ -std=c++14 -c   conftest.cpp >&5
configure:7658: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7670: result: no
configure:7239: checking whether g++ supports C++14 features with +std=c++14
configure:7658: g++ +std=c++14 -c   conftest.cpp >&5
configure:7658: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7670: result: no
configure:7239: checking whether g++ supports C++14 features with -h std=c++14
configure:7658: g++ -h std=c++14 -c   conftest.cpp >&5
configure:7658: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7670: result: no
configure:7239: checking whether g++ supports C++14 features with -std=c++1y
configure:7658: g++ -std=c++1y -c   conftest.cpp >&5
configure:7658: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7670: result: no
configure:7239: checking whether g++ supports C++14 features with +std=c++1y
configure:7658: g++ +std=c++1y -c   conftest.cpp >&5
configure:7658: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7670: result: no
configure:7239: checking whether g++ supports C++14 features with -h std=c++1y
configure:7658: g++ -h std=c++1y -c   conftest.cpp >&5
configure:7658: $? = 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
configure:7670: result: no
configure:7699: No compiler with C++14 support was found
configure:7975: checking for stdio.h
configure:7975: cc -c   conftest.c >&5
configure:7975: $? = 0
configure:7975: result: yes
configure:7975: checking for stdlib.h
configure:7975: cc -c   conftest.c >&5
configure:7975: $? = 0
configure:7975: result: yes
configure:7975: checking for string.h
configure:7975: cc -c   conftest.c >&5
configure:7975: $? = 0
configure:7975: result: yes
configure:7975: checking for inttypes.h
configure:7975: cc -c   conftest.c >&5
configure:7975: $? = 0
configure:7975: result: yes
configure:7975: checking for stdint.h
configure:7975: cc -c   conftest.c >&5
configure:7975: $? = 0
configure:7975: result: yes
configure:7975: checking for strings.h
configure:7975: cc -c   conftest.c >&5
configure:7975: $? = 0
configure:7975: result: yes
configure:7975: checking for sys/stat.h
configure:7975: cc -c   conftest.c >&5
configure:7975: $? = 0
configure:7975: result: yes
configure:7975: checking for sys/types.h
configure:7975: cc -c   conftest.c >&5
configure:7975: $? = 0
configure:7975: result: yes
configure:7975: checking for unistd.h
configure:7975: cc -c   conftest.c >&5
configure:7975: $? = 0
configure:7975: result: yes
configure:8000: checking whether byte ordering is bigendian
configure:8016: cc -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:20[stdin:21] not a function
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:20[stdin:21] syntax error, last name: a
configure:8016: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define STDC_HEADERS 1
| /* end confdefs.h.  */
| #ifndef __APPLE_CC__
| 	       not a universal capable compiler
| 	     #endif
| 	     typedef int dummy;
| 
configure:8062: cc -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:28[stdin:104] syntax error, last name: endian
configure:8062: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define STDC_HEADERS 1
| /* end confdefs.h.  */
| #include <sys/types.h>
| 	     #include <sys/param.h>
| 
| int
| main (void)
| {
| #if ! (defined BYTE_ORDER && defined BIG_ENDIAN \
| 		     && defined LITTLE_ENDIAN && BYTE_ORDER && BIG_ENDIAN \
| 		     && LITTLE_ENDIAN)
| 	      bogus endian macros
| 	     #endif
| 
|   ;
|   return 0;
| }
configure:8109: cc -c   conftest.c >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:25[stdin:118] syntax error, last name: endian
configure:8109: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define STDC_HEADERS 1
| /* end confdefs.h.  */
| #include <limits.h>
| 
| int
| main (void)
| {
| #if ! (defined _LITTLE_ENDIAN || defined _BIG_ENDIAN)
| 	      bogus endian macros
| 	     #endif
| 
|   ;
|   return 0;
| }
configure:8207: cc -o conftest    conftest.c  >&5
configure:8207: $? = 0
configure:8207: ./conftest
configure:8207: $? = 0
configure:8222: result: no
configure:8265: checking size of void *
configure:8271: cc -o conftest    conftest.c  >&5
configure:8271: $? = 0
configure:8271: ./conftest
configure:8271: $? = 0
configure:8288: result: 8
configure:8312: checking size of int
configure:8318: cc -o conftest    conftest.c  >&5
configure:8318: $? = 0
configure:8318: ./conftest
configure:8318: $? = 0
configure:8335: result: 4
configure:8358: checking size of long
configure:8364: cc -o conftest    conftest.c  >&5
configure:8364: $? = 0
configure:8364: ./conftest
configure:8364: $? = 0
configure:8381: result: 4
configure:8404: checking size of long long
configure:8410: cc -o conftest    conftest.c  >&5
configure:8410: $? = 0
configure:8410: ./conftest
configure:8410: $? = 0
configure:8427: result: 8
configure:8450: checking size of intmax_t
configure:8456: cc -o conftest    conftest.c  >&5
configure:8456: $? = 0
configure:8456: ./conftest
configure:8456: $? = 0
configure:8473: result: 8
configure:8501: checking build system type
configure:8517: result: x86_64-unknown-plan9
configure:8537: checking host system type
configure:8552: result: x86_64-unknown-plan9
configure:8625: checking whether pause instruction is compilable
configure:8642: cc -o conftest    conftest.c  >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:33[stdin:34] syntax error, last name: volatile
configure:8642: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define STDC_HEADERS 1
| #define SIZEOF_VOID_P 8
| #define LG_SIZEOF_PTR 3
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| __asm__ volatile("pause"); return 0;
|   ;
|   return 0;
| }
configure:8653: result: no
configure:8749: checking number of significant virtual address bits
configure:8802: cc -o conftest    conftest.c  >&5
/usr/glenda/APExp/sys/src/external/jemalloc/conftest.c:50[stdin:470] syntax error, last name: volatile
cc: cpp: 6c 9817: error
configure:8802: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define STDC_HEADERS 1
| #define SIZEOF_VOID_P 8
| #define LG_SIZEOF_PTR 3
| #define SIZEOF_INT 4
| #define LG_SIZEOF_INT 2
| #define SIZEOF_LONG 4
| #define LG_SIZEOF_LONG 2
| #define SIZEOF_LONG_LONG 8
| #define LG_SIZEOF_LONG_LONG 3
| #define SIZEOF_INTMAX_T 8
| #define LG_SIZEOF_INTMAX_T 3
| #define HAVE_CPU_SPINWAIT 1
| #define CPU_SPINWAIT 
| /* end confdefs.h.  */
| 
| #include <stdio.h>
| #ifdef _WIN32
| #include <limits.h>
| #include <intrin.h>
| typedef unsigned __int32 uint32_t;
| #else
| #include <stdint.h>
| #endif
| 
| int
| main (void)
| {
| 
| 	uint32_t r[4];
| 	uint32_t eax_in = 0x80000008U;
| #ifdef _WIN32
| 	__cpuid((int *)r, (int)eax_in);
| #else
| 	asm volatile ("cpuid"
| 	    : "=a" (r[0]), "=b" (r[1]), "=c" (r[2]), "=d" (r[3])
| 	    : "a" (eax_in), "c" (0)
| 	);
| #endif
| 	uint32_t eax_out = r[0];
| 	uint32_t vaddr = ((eax_out & 0x0000ff00U) >> 8);
| 	FILE *f = fopen("conftest.out", "w");
| 	if (f == NULL) {
| 		return 1;
| 	}
| 	if (vaddr > (sizeof(void *) << 3)) {
| 		vaddr = sizeof(void *) << 3;
| 	}
| 	fprintf(f, "%u", vaddr);
| 	fclose(f);
| 	return 0;
| 
|   ;
|   return 0;
| }
configure:8816: result: error
configure:8826: error: cannot determine number of significant virtual address bits

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_big_endian=0
ac_cv_build=x86_64-unknown-plan9
ac_cv_c_bigendian=no
ac_cv_c_compiler_gnu=no
ac_cv_cxx_compiler_gnu=no
ac_cv_env_CCC_set=
ac_cv_env_CCC_value=
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_CXXFLAGS_set=
ac_cv_env_CXXFLAGS_value=
ac_cv_env_CXX_set=
ac_cv_env_CXX_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_header_inttypes_h=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdio_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_unistd_h=yes
ac_cv_host=x86_64-unknown-plan9
ac_cv_objext=o
ac_cv_path_XSLTPROC=false
ac_cv_prog_CC=cc
ac_cv_prog_CPP='cc -E'
ac_cv_prog_cc_c11=no
ac_cv_prog_cc_c89=
ac_cv_prog_cc_c99=no
ac_cv_prog_cc_g=yes
ac_cv_prog_cc_stdc=
ac_cv_prog_cxx_cxx11=no
ac_cv_prog_cxx_cxx98=no
ac_cv_prog_cxx_g=no
ac_cv_sizeof_int=4
ac_cv_sizeof_intmax_t=8
ac_cv_sizeof_long=4
ac_cv_sizeof_long_long=8
ac_cv_sizeof_void_p=8
ax_cv_cxx_compile_cxx14__h_std_cpp14=no
ax_cv_cxx_compile_cxx14__h_std_cpp1y=no
ax_cv_cxx_compile_cxx14__std_cpp14=no
ax_cv_cxx_compile_cxx14__std_cpp1y=no
ax_cv_cxx_compile_cxx14_pstd_cpp14=no
ax_cv_cxx_compile_cxx14_pstd_cpp1y=no
ax_cv_cxx_compile_cxx17__h_std_cpp17=no
ax_cv_cxx_compile_cxx17__h_std_cpp1z=no
ax_cv_cxx_compile_cxx17__std_cpp17=no
ax_cv_cxx_compile_cxx17__std_cpp1z=no
ax_cv_cxx_compile_cxx17_pstd_cpp17=no
ax_cv_cxx_compile_cxx17_pstd_cpp1z=no
je_cv_cray=no
je_cv_cray_prgenv_wrapper=
je_cv_lg_vaddr=error
je_cv_msvc=no
je_cv_pause=no

## ----------------- ##
## Output variables. ##
## ----------------- ##

AR=''
ARFLAGS=''
AROUT=''
AUTOCONF=''
AWK=''
BINDIR='/usr/local/bin'
CC='cc'
CC_MM=''
CFLAGS=''
CONFIG=''
CONFIGURE_CFLAGS=''
CONFIGURE_CXXFLAGS=''
CPP='cc -E'
CPPFLAGS=''
CTARGET=''
CXX='g++'
CXXFLAGS=''
DATADIR='/usr/local/share'
DEFS=''
DSO_LDFLAGS=''
DUMP_SYMS=''
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EXEEXT=''
EXTRA_CFLAGS=''
EXTRA_CXXFLAGS=''
EXTRA_LDFLAGS=''
HAVE_CXX14='0'
HAVE_CXX17='0'
INCLUDEDIR='/usr/local/include'
INSTALL_DATA=''
INSTALL_PROGRAM=''
INSTALL_SCRIPT=''
JEMALLOC_CPREFIX=''
JEMALLOC_PREFIX=''
LD='pcc'
LDFLAGS=''
LDTARGET=''
LD_PRELOAD_VAR=''
LIBDIR='/usr/local/lib'
LIBOBJS=''
LIBS=''
LM=''
LTLIBOBJS=''
MANDIR='/usr/local/share/man'
MKLIB=''
NM=''
OBJEXT='o'
PACKAGE_BUGREPORT=''
PACKAGE_NAME=''
PACKAGE_STRING=''
PACKAGE_TARNAME=''
PACKAGE_URL=''
PACKAGE_VERSION=''
PATH_SEPARATOR=':'
PIC_CFLAGS=''
PREFIX='/usr/local'
RANLIB=''
RPATH=''
RPATH_EXTRA=''
SHELL='/bin/sh'
SOREV=''
SPECIFIED_CFLAGS=''
SPECIFIED_CXXFLAGS=''
TEST_LD_MODE=''
XSLROOT=''
XSLTPROC='false'
a=''
abi=''
abs_objroot='/usr/glenda/APExp/sys/src/external/jemalloc/'
abs_srcroot='/usr/glenda/APExp/sys/src/external/jemalloc/'
ac_ct_CC=''
ac_ct_CXX=''
bindir='${exec_prefix}/bin'
build='x86_64-unknown-plan9'
build_alias=''
build_cpu='x86_64'
build_os='plan9'
build_vendor='unknown'
cfghdrs_in=''
cfghdrs_out=''
cfgoutputs_in=''
cfgoutputs_out=''
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE}'
dvidir='${docdir}'
enable_autogen=''
enable_cache_oblivious=''
enable_cxx='0'
enable_debug=''
enable_doc=''
enable_experimental_smallocx=''
enable_fill=''
enable_initial_exec_tls=''
enable_lazy_lock=''
enable_log=''
enable_opt_safety_checks=''
enable_opt_size_checks=''
enable_prof=''
enable_readlinkat=''
enable_shared=''
enable_static=''
enable_stats=''
enable_tls=''
enable_uaf_detection=''
enable_utrace=''
enable_xmalloc=''
enable_zone_allocator=''
exe=''
exec_prefix='/usr/local'
host='x86_64-unknown-plan9'
host_alias=''
host_cpu='x86_64'
host_os='plan9'
host_vendor='unknown'
htmldir='${docdir}'
importlib=''
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_suffix=''
je_=''
jemalloc_version=''
jemalloc_version_bugfix=''
jemalloc_version_gid=''
jemalloc_version_major=''
jemalloc_version_minor=''
jemalloc_version_nrev=''
libdir='${exec_prefix}/lib'
libdl=''
libexecdir='${exec_prefix}/libexec'
libprefix=''
link_whole_archive=''
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
o=''
objroot=''
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/usr/local'
private_namespace=''
program_transform_name='s,x,x,'
psdir='${docdir}'
rev='2'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
so=''
srcroot=''
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME ""
#define PACKAGE_TARNAME ""
#define PACKAGE_VERSION ""
#define PACKAGE_STRING ""
#define PACKAGE_BUGREPORT ""
#define PACKAGE_URL ""
#define HAVE_STDIO_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_STRINGS_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_UNISTD_H 1
#define STDC_HEADERS 1
#define SIZEOF_VOID_P 8
#define LG_SIZEOF_PTR 3
#define SIZEOF_INT 4
#define LG_SIZEOF_INT 2
#define SIZEOF_LONG 4
#define LG_SIZEOF_LONG 2
#define SIZEOF_LONG_LONG 8
#define LG_SIZEOF_LONG_LONG 3
#define SIZEOF_INTMAX_T 8
#define LG_SIZEOF_INTMAX_T 3
#define HAVE_CPU_SPINWAIT 1
#define CPU_SPINWAIT 

configure: exit 1
