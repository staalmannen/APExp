.TH TIME 3am "Jan 16 2023" "Free Software Foundation" "GNU Awk Extension Modules"
.SH NAME
time \- time functions for gawk
.SH SYNOPSIS
.ft CW
@load "time"
.sp
time = gettimeofday()
.br
ret = sleep(amount)
.br
timeval = strptime(string, format)
.ft R
.SH DESCRIPTION
The
.I time
extension adds three functions named
.B gettimeofday()
.BR sleep() ,
and
.BR stptrime() , 
as follows.
.TP
.B gettimeofday()
This function returns the number of seconds since the Epoch
as a floating-point value. It should have subsecond precision.
It returns \-1 upon error and sets
.B ERRNO
to indicate the problem.
.TP
.BI sleep( seconds )
This function attempts to sleep for the given amount of seconds, which
may include a fractional portion.
If
.I seconds
is negative, or the attempt to sleep fails,
then it returns \-1 and sets
.BR ERRNO .
Otherwise, the function should return 0 after sleeping
for the indicated amount of time.
.TP
.B strptime()
This function takes two arguments, a string representing a date and time,
and a format string describing the data in the string. It calls the
C library
.IR strptime (3)
function with the given values.
If the parsing succeeds, the results are passed to the C library
.IR mktime (3)
function, and its result is returned, expressing the time in seconds
since the epoch in the current local timezone, regardless
of any timezone specified in the string arguments.
(This is the same as
.IR gawk 's
built-in
.B systime()
function.)
Otherwise it returns \-1 upon error. In the latter case,
.B ERRNO
indicates the problem.
.\" .SH NOTES
.SH BUGS
The underlying
.IR strptime (3)
C library routine apparently ignores any time zone indication
in the date string, producing values relative to the current time zone.
It might be better to have this routine return a string similar
to what
.IR gawk 's
.B mktime()
function expects, but we ran out of energy.
.SH EXAMPLE
.ft CW
.nf
@load "time"
\&...
printf "It is now %g seconds since the Epoch\en", gettimeofday()
\&...
printf "Pausing for a while... " ; sleep(2.5) ; print "done"
\&...
format = "%b %d %H:%M:%S %Z %Y"
now = systime()
print now, "<" (result = strftime(format, now)) ">",
then = strptime(result, format)
print strftime(format, then)
.fi
.ft R
.SH "SEE ALSO"
.IR "GAWK: Effective AWK Programming" ,
.IR filefuncs (3am),
.IR fnmatch (3am),
.IR fork (3am),
.IR inplace (3am),
.IR ordchr (3am),
.IR readdir (3am),
.IR readfile (3am),
.IR revoutput (3am),
.IR rwarray (3am).
.PP
.IR gettimeofday (2),
.IR nanosleep (2),
.IR select (2),
and
.IR strptime (3).
.SH AUTHOR
Arnold Robbins,
.BR arnold@skeeve.com .
.SH COPYING PERMISSIONS
Copyright \(co 2012, 2013, 2018, 2022, 2023,
Free Software Foundation, Inc.
.br
Copyright \(co 2019,
Arnold David Robbins.
.PP
Permission is granted to make and distribute verbatim copies of
this manual page provided the copyright notice and this permission
notice are preserved on all copies.
.ig
Permission is granted to process this file through troff and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual page).
..
.PP
Permission is granted to copy and distribute modified versions of this
manual page under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
.PP
Permission is granted to copy and distribute translations of this
manual page into another language, under the above conditions for
modified versions, except that this permission notice may be stated in
a translation approved by the Foundation.
.\" vim: set filetype=nroff :
