/* Automatically generated file, do not edit */
static const struct el_bindings_t el_func_help[] = {
    { (unsigned short *) L"vi-paste-next",              VI_PASTE_NEXT,                
      (unsigned short *) L"Vi paste previous deletion to the right of the cursor" },
    { (unsigned short *) L"vi-paste-prev",              VI_PASTE_PREV,                
      (unsigned short *) L"Vi paste previous deletion to the left of the cursor" },
    { (unsigned short *) L"vi-prev-big-word",           VI_PREV_BIG_WORD,             
      (unsigned short *) L"Vi move to the previous space delimited word" },
    { (unsigned short *) L"vi-prev-word",               VI_PREV_WORD,                 
      (unsigned short *) L"Vi move to the previous word" },
    { (unsigned short *) L"vi-next-big-word",           VI_NEXT_BIG_WORD,             
      (unsigned short *) L"Vi move to the next space delimited word" },
    { (unsigned short *) L"vi-next-word",               VI_NEXT_WORD,                 
      (unsigned short *) L"Vi move to the next word" },
    { (unsigned short *) L"vi-change-case",             VI_CHANGE_CASE,               
      (unsigned short *) L"Vi change case of character under the cursor and advance one character" },
    { (unsigned short *) L"vi-change-meta",             VI_CHANGE_META,               
      (unsigned short *) L"Vi change prefix command" },
    { (unsigned short *) L"vi-insert-at-bol",           VI_INSERT_AT_BOL,             
      (unsigned short *) L"Vi enter insert mode at the beginning of line" },
    { (unsigned short *) L"vi-replace-char",            VI_REPLACE_CHAR,              
      (unsigned short *) L"Vi replace character under the cursor with the next character typed" },
    { (unsigned short *) L"vi-replace-mode",            VI_REPLACE_MODE,              
      (unsigned short *) L"Vi enter replace mode" },
    { (unsigned short *) L"vi-substitute-char",         VI_SUBSTITUTE_CHAR,           
      (unsigned short *) L"Vi replace character under the cursor and enter insert mode" },
    { (unsigned short *) L"vi-substitute-line",         VI_SUBSTITUTE_LINE,           
      (unsigned short *) L"Vi substitute entire line" },
    { (unsigned short *) L"vi-change-to-eol",           VI_CHANGE_TO_EOL,             
      (unsigned short *) L"Vi change to end of line" },
    { (unsigned short *) L"vi-insert",                  VI_INSERT,                    
      (unsigned short *) L"Vi enter insert mode" },
    { (unsigned short *) L"vi-add",                     VI_ADD,                       
      (unsigned short *) L"Vi enter insert mode after the cursor" },
    { (unsigned short *) L"vi-add-at-eol",              VI_ADD_AT_EOL,                
      (unsigned short *) L"Vi enter insert mode at end of line" },
    { (unsigned short *) L"vi-delete-meta",             VI_DELETE_META,               
      (unsigned short *) L"Vi delete prefix command" },
    { (unsigned short *) L"vi-end-big-word",            VI_END_BIG_WORD,              
      (unsigned short *) L"Vi move to the end of the current space delimited word" },
    { (unsigned short *) L"vi-end-word",                VI_END_WORD,                  
      (unsigned short *) L"Vi move to the end of the current word" },
    { (unsigned short *) L"vi-undo",                    VI_UNDO,                      
      (unsigned short *) L"Vi undo last change" },
    { (unsigned short *) L"vi-command-mode",            VI_COMMAND_MODE,              
      (unsigned short *) L"Vi enter command mode (use alternative key bindings)" },
    { (unsigned short *) L"vi-zero",                    VI_ZERO,                      
      (unsigned short *) L"Vi move to the beginning of line" },
    { (unsigned short *) L"vi-delete-prev-char",        VI_DELETE_PREV_CHAR,          
      (unsigned short *) L"Vi move to previous character (backspace)" },
    { (unsigned short *) L"vi-list-or-eof",             VI_LIST_OR_EOF,               
      (unsigned short *) L"Vi list choices for completion or indicate end of file if empty line" },
    { (unsigned short *) L"vi-kill-line-prev",          VI_KILL_LINE_PREV,            
      (unsigned short *) L"Vi cut from beginning of line to cursor" },
    { (unsigned short *) L"vi-search-prev",             VI_SEARCH_PREV,               
      (unsigned short *) L"Vi search history previous" },
    { (unsigned short *) L"vi-search-next",             VI_SEARCH_NEXT,               
      (unsigned short *) L"Vi search history next" },
    { (unsigned short *) L"vi-repeat-search-next",      VI_REPEAT_SEARCH_NEXT,        
      (unsigned short *) L"Vi repeat current search in the same search direction" },
    { (unsigned short *) L"vi-repeat-search-prev",      VI_REPEAT_SEARCH_PREV,        
      (unsigned short *) L"Vi repeat current search in the opposite search direction" },
    { (unsigned short *) L"vi-next-char",               VI_NEXT_CHAR,                 
      (unsigned short *) L"Vi move to the character specified next" },
    { (unsigned short *) L"vi-prev-char",               VI_PREV_CHAR,                 
      (unsigned short *) L"Vi move to the character specified previous" },
    { (unsigned short *) L"vi-to-next-char",            VI_TO_NEXT_CHAR,              
      (unsigned short *) L"Vi move up to the character specified next" },
    { (unsigned short *) L"vi-to-prev-char",            VI_TO_PREV_CHAR,              
      (unsigned short *) L"Vi move up to the character specified previous" },
    { (unsigned short *) L"vi-repeat-next-char",        VI_REPEAT_NEXT_CHAR,          
      (unsigned short *) L"Vi repeat current character search in the same search direction" },
    { (unsigned short *) L"vi-repeat-prev-char",        VI_REPEAT_PREV_CHAR,          
      (unsigned short *) L"Vi repeat current character search in the opposite search direction" },
    { (unsigned short *) L"vi-match",                   VI_MATCH,                     
      (unsigned short *) L"Vi go to matching () {} or []" },
    { (unsigned short *) L"vi-undo-line",               VI_UNDO_LINE,                 
      (unsigned short *) L"Vi undo all changes to line" },
    { (unsigned short *) L"vi-to-column",               VI_TO_COLUMN,                 
      (unsigned short *) L"Vi go to specified column" },
    { (unsigned short *) L"vi-yank-end",                VI_YANK_END,                  
      (unsigned short *) L"Vi yank to end of line" },
    { (unsigned short *) L"vi-yank",                    VI_YANK,                      
      (unsigned short *) L"Vi yank" },
    { (unsigned short *) L"vi-comment-out",             VI_COMMENT_OUT,               
      (unsigned short *) L"Vi comment out current command" },
    { (unsigned short *) L"vi-alias",                   VI_ALIAS,                     
      (unsigned short *) L"Vi include shell alias" },
    { (unsigned short *) L"vi-to-history-line",         VI_TO_HISTORY_LINE,           
      (unsigned short *) L"Vi go to specified history file line." },
    { (unsigned short *) L"vi-histedit",                VI_HISTEDIT,                  
      (unsigned short *) L"Vi edit history line with vi" },
    { (unsigned short *) L"vi-history-word",            VI_HISTORY_WORD,              
      (unsigned short *) L"Vi append word from previous input line" },
    { (unsigned short *) L"vi-redo",                    VI_REDO,                      
      (unsigned short *) L"Vi redo last non-motion command" },
    { (unsigned short *) L"em-delete-or-list",          EM_DELETE_OR_LIST,            
      (unsigned short *) L"Delete character under cursor or list completions if at end of line" },
    { (unsigned short *) L"em-delete-next-word",        EM_DELETE_NEXT_WORD,          
      (unsigned short *) L"Cut from cursor to end of current word" },
    { (unsigned short *) L"em-yank",                    EM_YANK,                      
      (unsigned short *) L"Paste cut buffer at cursor position" },
    { (unsigned short *) L"em-kill-line",               EM_KILL_LINE,                 
      (unsigned short *) L"Cut the entire line and save in cut buffer" },
    { (unsigned short *) L"em-kill-region",             EM_KILL_REGION,               
      (unsigned short *) L"Cut area between mark and cursor and save in cut buffer" },
    { (unsigned short *) L"em-copy-region",             EM_COPY_REGION,               
      (unsigned short *) L"Copy area between mark and cursor to cut buffer" },
    { (unsigned short *) L"em-gosmacs-transpose",       EM_GOSMACS_TRANSPOSE,         
      (unsigned short *) L"Exchange the two characters before the cursor" },
    { (unsigned short *) L"em-next-word",               EM_NEXT_WORD,                 
      (unsigned short *) L"Move next to end of current word" },
    { (unsigned short *) L"em-upper-case",              EM_UPPER_CASE,                
      (unsigned short *) L"Uppercase the characters from cursor to end of current word" },
    { (unsigned short *) L"em-capitol-case",            EM_CAPITOL_CASE,              
      (unsigned short *) L"Capitalize the characters from cursor to end of current word" },
    { (unsigned short *) L"em-lower-case",              EM_LOWER_CASE,                
      (unsigned short *) L"Lowercase the characters from cursor to end of current word" },
    { (unsigned short *) L"em-set-mark",                EM_SET_MARK,                  
      (unsigned short *) L"Set the mark at cursor" },
    { (unsigned short *) L"em-exchange-mark",           EM_EXCHANGE_MARK,             
      (unsigned short *) L"Exchange the cursor and mark" },
    { (unsigned short *) L"em-universal-argument",      EM_UNIVERSAL_ARGUMENT,        
      (unsigned short *) L"Universal argument (argument times 4)" },
    { (unsigned short *) L"em-meta-next",               EM_META_NEXT,                 
      (unsigned short *) L"Add 8th bit to next character typed" },
    { (unsigned short *) L"em-toggle-overwrite",        EM_TOGGLE_OVERWRITE,          
      (unsigned short *) L"Switch from insert to overwrite mode or vice versa" },
    { (unsigned short *) L"em-copy-prev-word",          EM_COPY_PREV_WORD,            
      (unsigned short *) L"Copy current word to cursor" },
    { (unsigned short *) L"em-inc-search-next",         EM_INC_SEARCH_NEXT,           
      (unsigned short *) L"Emacs incremental next search" },
    { (unsigned short *) L"em-inc-search-prev",         EM_INC_SEARCH_PREV,           
      (unsigned short *) L"Emacs incremental reverse search" },
    { (unsigned short *) L"em-delete-prev-char",        EM_DELETE_PREV_CHAR,          
      (unsigned short *) L"Delete the character to the left of the cursor" },
    { (unsigned short *) L"ed-end-of-file",             ED_END_OF_FILE,               
      (unsigned short *) L"Indicate end of file" },
    { (unsigned short *) L"ed-insert",                  ED_INSERT,                    
      (unsigned short *) L"Add character to the line" },
    { (unsigned short *) L"ed-delete-prev-word",        ED_DELETE_PREV_WORD,          
      (unsigned short *) L"Delete from beginning of current word to cursor" },
    { (unsigned short *) L"ed-delete-next-char",        ED_DELETE_NEXT_CHAR,          
      (unsigned short *) L"Delete character under cursor" },
    { (unsigned short *) L"ed-kill-line",               ED_KILL_LINE,                 
      (unsigned short *) L"Cut to the end of line" },
    { (unsigned short *) L"ed-move-to-end",             ED_MOVE_TO_END,               
      (unsigned short *) L"Move cursor to the end of line" },
    { (unsigned short *) L"ed-move-to-beg",             ED_MOVE_TO_BEG,               
      (unsigned short *) L"Move cursor to the beginning of line" },
    { (unsigned short *) L"ed-transpose-chars",         ED_TRANSPOSE_CHARS,           
      (unsigned short *) L"Exchange the character to the left of the cursor with the one under it" },
    { (unsigned short *) L"ed-next-char",               ED_NEXT_CHAR,                 
      (unsigned short *) L"Move to the right one character" },
    { (unsigned short *) L"ed-prev-word",               ED_PREV_WORD,                 
      (unsigned short *) L"Move to the beginning of the current word" },
    { (unsigned short *) L"ed-prev-char",               ED_PREV_CHAR,                 
      (unsigned short *) L"Move to the left one character" },
    { (unsigned short *) L"ed-quoted-insert",           ED_QUOTED_INSERT,             
      (unsigned short *) L"Add the next character typed verbatim" },
    { (unsigned short *) L"ed-digit",                   ED_DIGIT,                     
      (unsigned short *) L"Adds to argument or enters a digit" },
    { (unsigned short *) L"ed-argument-digit",          ED_ARGUMENT_DIGIT,            
      (unsigned short *) L"Digit that starts argument" },
    { (unsigned short *) L"ed-unassigned",              ED_UNASSIGNED,                
      (unsigned short *) L"Indicates unbound character" },
    { (unsigned short *) L"ed-ignore",                  ED_IGNORE,                    
      (unsigned short *) L"Input characters that have no effect" },
    { (unsigned short *) L"ed-newline",                 ED_NEWLINE,                   
      (unsigned short *) L"Execute command" },
    { (unsigned short *) L"ed-delete-prev-char",        ED_DELETE_PREV_CHAR,          
      (unsigned short *) L"Delete the character to the left of the cursor" },
    { (unsigned short *) L"ed-clear-screen",            ED_CLEAR_SCREEN,              
      (unsigned short *) L"Clear screen leaving current line at the top" },
    { (unsigned short *) L"ed-redisplay",               ED_REDISPLAY,                 
      (unsigned short *) L"Redisplay everything" },
    { (unsigned short *) L"ed-start-over",              ED_START_OVER,                
      (unsigned short *) L"Erase current line and start from scratch" },
    { (unsigned short *) L"ed-sequence-lead-in",        ED_SEQUENCE_LEAD_IN,          
      (unsigned short *) L"First character in a bound sequence" },
    { (unsigned short *) L"ed-prev-history",            ED_PREV_HISTORY,              
      (unsigned short *) L"Move to the previous history line" },
    { (unsigned short *) L"ed-next-history",            ED_NEXT_HISTORY,              
      (unsigned short *) L"Move to the next history line" },
    { (unsigned short *) L"ed-search-prev-history",     ED_SEARCH_PREV_HISTORY,       
      (unsigned short *) L"Search previous in history for a line matching the current" },
    { (unsigned short *) L"ed-search-next-history",     ED_SEARCH_NEXT_HISTORY,       
      (unsigned short *) L"Search next in history for a line matching the current" },
    { (unsigned short *) L"ed-prev-line",               ED_PREV_LINE,                 
      (unsigned short *) L"Move up one line" },
    { (unsigned short *) L"ed-next-line",               ED_NEXT_LINE,                 
      (unsigned short *) L"Move down one line" },
    { (unsigned short *) L"ed-command",                 ED_COMMAND,                   
      (unsigned short *) L"Editline extended command" },
};
