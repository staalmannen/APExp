{\rtf1\ansi{\fonttbl\f0\fnil Times-Roman;\f1\fswiss Helvetica;\f2\fmodern Courier;}\paperw12000\paperh8000\margl40\margr40
\pard\f0\fs24\cf0 Portable Object Compiler (c) 1997,98,99,2003.  All Rights Reserved.\fs16\
\
\
\
\
\
\
\f1\b\fs56\li2200 OrdCltn\f0\b0\fs16\
\
\
\
\
\
\f0\fs28\li2200 {\b {\f1 Inherits from:}} Cltn\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Class Description\b0\f0\fs16\
\
\f0\fs28\li2200 {\b OrdCltn} (alias {\b OrderedCollection}) instances are ordered collections of objects : you can access, add or remove elements at a specified offset in the array of elements.  {\b OrdCltn} takes care of the memory allocation issues to hold the objects.\fs16\
\
\f0\fs28\li2200 There can be no {\b nil} entries between the first (at offset 0) and last  elements (at {\b size} minus one).  For this reason, all methods that add objects refuse to add {\b nil}'s.  When entries are added or removed, the offsets of the remaining entries change.\fs16\
\
\f0\fs28\li2200 Offsets into collections are traditionally unsigned integers.  Methods that return an offset, e.g., {\f2 offsetOf:} and {\f2 lastOffset} return a value of (unsigned)-1 to indicate that an object has not been found.\fs16\
\
\f0\fs28\li2200 There are many methods for adding or inserting members into a collection.  Although members may be added at any point in the collection, they are generally added at the end using {\f2 add:}.\fs16\
\
\f0\fs28\li2200 A member may be searched for using either the {\f2 find:} or {\f2 findMatching:} method.  In the first case, the member in the collection must be an exact match.  In the second case, the member must match in the sense of the {\f2 isEqual:} method.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Method types\b0\f0\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Creation}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- new\
	- new:\
	- with:\
	- with:with:\
	- add:\
	- copy\
	- deepCopy\
	- emptyYourself\
	- freeContents\
	- free\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Interrogation}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- size\
	- isEmpty\
	- lastOffset\
	- eachElement\
	- firstElement\
	- lastElement\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Comparing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- isEqual:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Adding}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- add:\
	- addFirst:\
	- addLast:\
	- addIfAbsent:\
	- addIfAbsentMatching:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Insertion}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- at:insert:\
	- insert:after:\
	- insert:before:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Relative Accessing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- after:\
	- before:\
	- at:\
	- at:put:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Removing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- removeFirst\
	- removeLast\
	- removeAt:\
	- removeAtIndex:\
	- remove:\
	- remove:ifAbsent:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Testing Contents}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- includesAllOf:\
	- includesAnyOf:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Adding and Removing Contents}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- addAll:\
	- addContentsOf:\
	- addContentsTo:\
	- removeAll:\
	- removeContentsFrom:\
	- removeContentsOf:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Combining}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- intersection:\
	- union:\
	- difference:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Converting}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- asSet\
	- asOrdCltn\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Using Blocks}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- detect:\
	- detect:ifNone:\
	- select:\
	- reject:\
	- collect:\
	- count:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Making elements perform}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- elementsPerform:\
	- elementsPerform:with:\
	- elementsPerform:with:with:\
	- elementsPerform:with:with:with:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Do Blocks}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- do:\
	- do:until:\
	- reverseDo:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Locating}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- find:\
	- findMatching:\
	- includes:\
	- findSTR:\
	- contains:\
	- offsetOf:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Printing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- printOn:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Archiving}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- fileOutOn:\
	- fileInFrom:\
\pard\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Methods\b0\f0\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 new\f0\b0\
\f0\fs28\li2500 +{\b new}\fs16\
\
\f0\fs28\li2200 Returns a new empty collection.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 new:\f0\b0\
\f0\fs28\li2500 +{\b new}:(unsigned){\i n}\fs16\
\
\f0\fs28\li2200 Returns a new empty collection, which can hold at least {\i n} elements without having to expand.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 with:\f0\b0\
\f0\fs28\li2500 +{\b with}:(int){\i nArgs,...}\fs16\
\
\f0\fs28\li2200 Returns a new object with {\i nArgs} elements.  For example,\fs16\
\
\f2\fs24\li2800 id aCltn = [OrdCltn with:2,anObject,otherObject];\
\f0\fs16\
\f0\fs28\li2200 creates a collection and adds {\i anObject} and {\i otherObject} to it.  In a similar way, {\b Set} or {\b SortCltn} instances can be created like this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 with:with:\f0\b0\
\f0\fs28\li2500 +{\b with}:{\i firstObject}{\b with}:{\i nextObject}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 with:} 2,{\i firstObject},{\i nextObject}. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 add:\f0\b0\
\f0\fs28\li2500 +{\b add}:{\i firstObject}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 with:} 1,{\i firstObject}. \fs16\
\
\f0\fs28\li2200 This (factory) method has the same name as the instance method {\f2 add:} and can be used as follows, in circumstances when the user does not want to allocate a collection unless it is actually used :\fs16\
\
\f2\fs24\li2800 aCltn = [ (aCltn)?aCltn:OrdCltn add:myObject ];\
\f0\fs16\
\f0\fs28\li2200 This shows that creation of the collection is delayed until it is actually needed.  If the collection already exists, objects are simply added, using the instance method {\f2 add:}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 copy\f0\b0\
\f0\fs28\li2500 -{\b copy}\fs16\
\
\f0\fs28\li2200 Returns a new copy of the collection.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 deepCopy\f0\b0\
\f0\fs28\li2500 -{\b deepCopy}\fs16\
\
\f0\fs28\li2200 Returns a new copy of the collection.  The members in the new collection are deep copies of the members in the original collection.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 emptyYourself\f0\b0\
\f0\fs28\li2500 -{\b emptyYourself}\fs16\
\
\f0\fs28\li2200 Removes all the members of the collection (without freeing them).  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 freeContents\f0\b0\
\f0\fs28\li2500 -{\b freeContents}\fs16\
\
\f0\fs28\li2200 Removes and frees all the members of the receiver, but doesn't free the receiver itself.  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 free\f0\b0\
\f0\fs28\li2500 -{\b free}\fs16\
\
\f0\fs28\li2200 Frees the collection, but not its contents.  Returns {\b nil}.  Do :\fs16\
\
\f2\fs24\li2800 aCltn = [[aCltn freeContents] free];\
\f0\fs16\
\f0\fs28\li2200 if you want to free the collection and its contents.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 size\f0\b0\
\f0\fs28\li2500 - (unsigned){\b size}\fs16\
\
\f0\fs28\li2200 Returns the number of objects in the collection.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isEmpty\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isEmpty}\fs16\
\
\f0\fs28\li2200 Whether the number of objects in the collection is equal to zero.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 lastOffset\f0\b0\
\f0\fs28\li2500 - (unsigned){\b lastOffset}\fs16\
\
\f0\fs28\li2200 Returns the offset of the last element.  If there are no elements it returns (unsigned)-1.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 eachElement\f0\b0\
\f0\fs28\li2500 -{\b eachElement}\fs16\
\
\f0\fs28\li2200 Returns a sequence of the elements in the collection.\fs16\
\
\f2\fs24\li2800 aSeq = [aCltn eachElement];\
while ((anElement = [aSeq next])) \{\
    /* do something */\
\}\
aSeq = [aSeq free];\
\f0\fs16\
\fs16\
\
\f1\b\fs28\li2200 firstElement\f0\b0\
\f0\fs28\li2500 -{\b firstElement}\fs16\
\
\f0\fs28\li2200 Returns the first element in the collection.  If there are no elements, returns {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 lastElement\f0\b0\
\f0\fs28\li2500 -{\b lastElement}\fs16\
\
\f0\fs28\li2200 Returns the last element in the collection.  If there are no elements, returns {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isEqual:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isEqual}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Returns YES if {\i aCltn} is a collection, and if each member of its contents responds affirmatively to the message {\f2 isEqual:} when compared to the corresponding member of the receiver's contents.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 add:\f0\b0\
\f0\fs28\li2500 -{\b add}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Adds {\i anObject} to the collection as the last element and returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addFirst:\f0\b0\
\f0\fs28\li2500 -{\b addFirst}:{\i newObject}\fs16\
\
\f0\fs28\li2200 Adds {\i newObject} as the first (zero-th) element of the collection.  Returns the receiver.  Any elements at this offset or higher are relocated to the next higher offset to make room.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addLast:\f0\b0\
\f0\fs28\li2500 -{\b addLast}:{\i newObject}\fs16\
\
\f0\fs28\li2200 Identical to the {\f2 add:} method.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addIfAbsent:\f0\b0\
\f0\fs28\li2500 -{\b addIfAbsent}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Adds {\i anObject} to the collection only if the collection does not have that same object, i.e., one that is pointer equal.  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addIfAbsentMatching:\f0\b0\
\f0\fs28\li2500 -{\b addIfAbsentMatching}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Adds {\i anObject} to the collection only if the collection does not have a matching object, i.e., one that is {\f2 isEqual:}.  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 at:insert:\f0\b0\
\f0\fs28\li2500 -{\b at}:(unsigned ){\i anOffset}{\b insert}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Inserts {\i anObject} at offset {\i anOffset} and returns the receiver.  Any elements at this offset or higher are relocated to the next higher offet to make room.\fs16\
\
\f0\fs28\li2200 If {\i anOffset} is greater than the size of the collection, an {\b OutOfBounds} exception is signalled.  The default handler aborts the process.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 insert:after:\f0\b0\
\f0\fs28\li2500 -{\b insert}:{\i newObject}{\b after}:{\i oldObject}\fs16\
\
\f0\fs28\li2200 Searches for {\i oldObject} in the collection, and inserts {\i newObject} after {\i oldObject}, moving later elements if necessary to make room.  Returns the receiver.\fs16\
\
\f0\fs28\li2200 If {\i oldObject} is not in the collection, a {\i Could not find object.} exception is raised.  The default handler aborts the process.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 insert:before:\f0\b0\
\f0\fs28\li2500 -{\b insert}:{\i newObject}{\b before}:{\i oldObject}\fs16\
\
\f0\fs28\li2200 First searches for {\i oldObject} in the collection, and inserts the {\i newObject} before {\i oldObject}.  Returns the receiver.\fs16\
\
\f0\fs28\li2200 If {\i oldObject} is not in the collection, a {\i Could not find object} exception is raised.  The default handler aborts the process.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 after:\f0\b0\
\f0\fs28\li2500 -{\b after}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Searches for {\i anObject} in the collection and, if found, returns the next object.  If {\i anObject} is the last element in the array, returns {\b nil}. \fs16\
\
\f0\fs28\li2200 If {\i anObject} is not in the collection, a {\i Could not find object} exception is raised.  The default handler aborts the process.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 before:\f0\b0\
\f0\fs28\li2500 -{\b before}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Searches for {\i anObject} in the collection and, if found, returns the object before it.  If {\i anObject} is the first element in the array, returns {\b nil}.\fs16\
\
\f0\fs28\li2200 If {\i anObject} is not in the collection, a {\i Could not find object} exception is raised.  The default handler aborts the process.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 at:\f0\b0\
\f0\fs28\li2500 -{\b at}:(unsigned ){\i anOffset}\fs16\
\
\f0\fs28\li2200 Returns the object at {\i anOffset}.  The first object is at offset 0 and the last object is at {\f2 size} minus one.\fs16\
\
\f0\fs28\li2200 If {\i offset} is greater than the last offset in the collection, an {\b OutOfBounds} exception is signalled.  The default handler aborts the process.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 at:put:\f0\b0\
\f0\fs28\li2500 -{\b at}:(unsigned ){\i anOffset}{\b put}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Replaces the object at {\i anOffset} with {\i anObject} and returns the old member at {\i anOffset}.  Signals an {\b OutOfBounds} exception if {\i anOffset} is greater than the size of the collection.  Returns {\b nil} if {\i anObject} is {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeFirst\f0\b0\
\f0\fs28\li2500 -{\b removeFirst}\fs16\
\
\f0\fs28\li2200 Removes the first element.  Returns that element or {\b nil} if there are no elements.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeLast\f0\b0\
\f0\fs28\li2500 -{\b removeLast}\fs16\
\
\f0\fs28\li2200 Removes the last element.  Returns that element or {\b nil} if there are no elements.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeAt:\f0\b0\
\f0\fs28\li2500 -{\b removeAt}:(unsigned ){\i anOffset}\fs16\
\
\f0\fs28\li2200 Removes the object at {\i anOffset}.  When an object is removed, the remaining elements are adjusted so that there are no {\b nil} entries between the first and last element.  This adjustment shrinks the collection and changes the offset of the entries.  Returns the object removed.\fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} Method name for ICpak101 compatibility.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeAtIndex:\f0\b0\
\f0\fs28\li2500 -{\b removeAtIndex}:(unsigned ){\i anOffset}\fs16\
\
\f0\fs28\li2200 Same as {\f2 removeAt:}.  Method name for Smalltalk compatibility.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 remove:\f0\b0\
\f0\fs28\li2500 -{\b remove}:{\i oldObject}\fs16\
\
\f0\fs28\li2200 Removes {\i oldObject} from the collection if {\i oldObject} is found, and returns {\i oldObject}.  Otherwise returns {\b nil}.\fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} The {\f2 remove:} method of the OrdCltn class is implemented to remove an exact match.  The Set class uses a match in the sense of {\f2 isEqual:} instead. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 remove:ifAbsent:\f0\b0\
\f0\fs28\li2500 -{\b remove}:{\i oldObject}{\b ifAbsent}:{\i exceptionBlock}\fs16\
\
\f0\fs28\li2200 Removes {\i oldObject} from the collection if {\i oldObject} is found, and returns {\i oldObject}.  Otherwise evaluates {\i exceptionBlock} and returns its return value.  For example, the method {\f2 remove:} is equivalent to the following :\fs16\
\
\f2\fs24\li2800 [ aCltn remove: oldObject ifAbsent: \{ nil \} ];\
\f0\fs16\
\f0\fs28\li2200 {\b {\f1 Note:}} The {\f2 remove:} method of the OrdCltn class is implemented to remove an exact match.  The Set class uses a match in the sense of {\f2 isEqual:} instead. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 includesAllOf:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b includesAllOf}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Answer whether all the elements of {\i aCltn} are in the receiver, by sending {\f2 includes:} for each individual element.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 includesAnyOf:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b includesAnyOf}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Answer whether any element of {\i aCltn} is in the receiver, by sending {\f2 includes:} for each individual element.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addAll:\f0\b0\
\f0\fs28\li2500 -{\b addAll}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Adds each member of {\i aCltn} to the receiver.  If {\i aCltn} is {\b nil}, no action is taken.  The argument {\i aCltn} need not be a collection, so long as it responds to {\f2 eachElement} in the same way as collections do.  Returns the receiver.\fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} If {\i aCltn} is the same object as the receiver, a {\f2 addYourself} message is sent to the object.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addContentsOf:\f0\b0\
\f0\fs28\li2500 -{\b addContentsOf}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 addAll:} and is provided for Stepstone ICpak101 compatibility.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addContentsTo:\f0\b0\
\f0\fs28\li2500 -{\b addContentsTo}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 addAll:}, but with argument and receiver interchanged, and is provided for Stepstone ICpak101 compatibility.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeAll:\f0\b0\
\f0\fs28\li2500 -{\b removeAll}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Removes all of the members of {\i aCltn} from the receiver. The argument {\i aCltn} need not be a collection, as long as it responds to {\f2 eachElement} as collections do.  Returns the receiver. \fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} If {\i aCltn} is the same object as the receiver, it empties itself using {\f2 emptyYourself} and returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeContentsFrom:\f0\b0\
\f0\fs28\li2500 -{\b removeContentsFrom}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 removeAll:}, and is provided for compatibility with Stepstone ICpak101.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeContentsOf:\f0\b0\
\f0\fs28\li2500 -{\b removeContentsOf}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 removeAll:}, and is provided for compatibility with Stepstone ICpak101.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 intersection:\f0\b0\
\f0\fs28\li2500 -{\b intersection}:{\i bag}\fs16\
\
\f0\fs28\li2200 Returns a new Collection which is the intersection of the receiver and {\i bag}.  The new Collection contains only those elements that were in both the receiver and {\i bag}.  The argument {\i bag} need not be an actual {\b Set} or {\b Bag} instance, as long as it implements {\f2 find:} as Sets do.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 union:\f0\b0\
\f0\fs28\li2500 -{\b union}:{\i bag}\fs16\
\
\f0\fs28\li2200 Returns a new Collection which is the union of the receiver and {\i bag}.  The new Collection returned has all the elements from both the receiver and {\i bag}.  The argument {\i bag} need not be an actual {\b Set} or {\b Bag} instance, as long as it implements {\f2 eachElement:} as Sets and Bags do.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 difference:\f0\b0\
\f0\fs28\li2500 -{\b difference}:{\i bag}\fs16\
\
\f0\fs28\li2200 Returns a new Collection which is the difference of the receiver and {\i bag}.  The new Collection returned has only those elements in the receiver that are not in {\i bag}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 asSet\f0\b0\
\f0\fs28\li2500 -{\b asSet}\fs16\
\
\f0\fs28\li2200 Creates a {\b Set} instance and adds the contents of the object to the set.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 asOrdCltn\f0\b0\
\f0\fs28\li2500 -{\b asOrdCltn}\fs16\
\
\f0\fs28\li2200 Creates a {\b OrdCltn} instance and adds the contents of the object to the set.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 detect:\f0\b0\
\f0\fs28\li2500 -{\b detect}:{\i aBlock}\fs16\
\
\f0\fs28\li2200 This message returns the first element in the receiver for which {\i aBlock} evaluates to something that is non-nil .  For example, the following :\fs16\
\
\f2\fs24\li2800 [ aCltn detect: \{ :each | [each isEqual:anObject] \} ];\
\f0\fs16\
\f0\fs28\li2200 Returns {\b nil} if there's no element for which {\i aBlock} evaluates to something that non-nil.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 detect:ifNone:\f0\b0\
\f0\fs28\li2500 -{\b detect}:{\i aBlock}{\b ifNone}:{\i noneBlock}\fs16\
\
\f0\fs28\li2200 This message returns the first element in the receiver for which {\i aBlock} evaluates to something that is non-nil.\fs16\
\
\f0\fs28\li2200 Evaluates {\i noneBlock} if there's no element for which {\i aBlock} evaluates to something that is non-nil, and returns the return value of that block.  For example,\fs16\
\
\f2\fs24\li2800 [ aCltn detect: \{ :e | [e isEqual:anObject]\} ifNone: \{anObject\} ];\
\f0\fs16\
\fs16\
\
\f1\b\fs28\li2200 select:\f0\b0\
\f0\fs28\li2500 -{\b select}:{\i testBlock}\fs16\
\
\f0\fs28\li2200 This message will return a subset of the receiver containing all elements for which {\i testBlock} evaluates to an Object that is non-nil.  For example,\fs16\
\
\f2\fs24\li2800 [ aCltn select: \{ :each | [each isEqual:anObject] \} ];\
\f0\fs16\
\f0\fs28\li2200 Returns a new empty instance of the same class as the receiver, if there's no element for which {\i testBlock} evaluates to something that is non-nil. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 reject:\f0\b0\
\f0\fs28\li2500 -{\b reject}:{\i testBlock}\fs16\
\
\f0\fs28\li2200 Complement of {\f2 select:}\fs16\
\
\f0\fs28\li2200 This message will return a subset of the receiver containing all elements for which {\i testBlock} evaluates to nil.  For example,\fs16\
\
\f2\fs24\li2800 [ aCltn reject: \{ :each | [each isEqual:anObject] \} ];\
\f0\fs16\
\f0\fs28\li2200 Returns a new empty instance of the same class as the receiver, if there's no element for which {\i testBlock} evaluates to nil.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 collect:\f0\b0\
\f0\fs28\li2500 -{\b collect}:{\i transformBlock}\fs16\
\
\f0\fs28\li2200 This message creates and returns a new collection of the same size and type as the receiver. The elements are the result of performing {\i transformBlock} on each element in the receiver (elements for which the Block would return {\b nil} are filtered out).\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 count:\f0\b0\
\f0\fs28\li2500 - (unsigned){\b count}:{\i aBlock}\fs16\
\
\f0\fs28\li2200 Evaluate {\i aBlock} with each of the receiver's elements as the argument.  Return the number that answered a non-{\b nil} value.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 elementsPerform:\f0\b0\
\f0\fs28\li2500 -{\b elementsPerform}:(SEL){\i aSelector}\fs16\
\
\f0\fs28\li2200 Send {\i aSelector} to all objects in the collection, starting from the object at offset {\i 0}.  For Stepstone compatibility.  Producer uses this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 elementsPerform:with:\f0\b0\
\f0\fs28\li2500 -{\b elementsPerform}:(SEL){\i aSelector}{\b with}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Send {\i aSelector} to all objects in the collection, starting from the object at offset {\i 0}.  For Stepstone compatibility.  Producer uses this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 elementsPerform:with:with:\f0\b0\
\f0\fs28\li2500 -{\b elementsPerform}:(SEL){\i aSelector}{\b with}:{\i anObject}{\b with}:{\i otherObject}\fs16\
\
\f0\fs28\li2200 Send {\i aSelector} to all objects in the collection, starting from the object at offset {\i 0}.  For Stepstone compatibility.  Producer uses this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 elementsPerform:with:with:with:\f0\b0\
\f0\fs28\li2500 -{\b elementsPerform}:(SEL){\i aSelector}{\b with}:{\i anObject}{\b with}:{\i otherObject}{\b with}:{\i thirdObj}\fs16\
\
\f0\fs28\li2200 Send {\i aSelector} to all objects in the collection, starting from the object at offset {\i 0}.  For Stepstone compatibility.  ICpak201 uses this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 do:\f0\b0\
\f0\fs28\li2500 -{\b do}:{\i aBlock}\fs16\
\
\f0\fs28\li2200 Evaluates {\i aBlock} for each element in the collection and returns {\b self}.  {\i aBlock} must be a block taking one object (element) as argument; the return value of the block is ignored by this method.\fs16\
\
\f0\fs28\li2200 Often, the Block would, as a side-effect, modify a variable, as in:\fs16\
\
\f2\fs24\li2800 int count = 0;\
[contents do: \{ :what | if (what == anObject) count++; \}];\
\f0\fs16\
\fs16\
\
\f1\b\fs28\li2200 do:until:\f0\b0\
\f0\fs28\li2500 -{\b do}:{\i aBlock}{\b until}:(BOOL*){\i flag}\fs16\
\
\f0\fs28\li2200 Evaluates {\i aBlock} for each element in the collection, or until the variable pointed to by {\i flag} becomes true, and returns {\b self}.  {\i aBlock} must be a block taking one object (element) as argument; the return value of the block is ignored by this method.\fs16\
\
\f0\fs28\li2200 Typically the Block will modify the variable {\i flag} when some condition holds:\fs16\
\
\f2\fs24\li2800 BOOL found = NO;\
[contents do:\{ :what | if (what == findObject) found=YES;\} until:&found];\
if (found) \{ ... \}\
\f0\fs16\
\fs16\
\
\f1\b\fs28\li2200 reverseDo:\f0\b0\
\f0\fs28\li2500 -{\b reverseDo}:{\i aBlock}\fs16\
\
\f0\fs28\li2200 Like {\f2 do:} but specific to {\b OrdCltn} : works from the element at the last offset towards the element at offset 0.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 find:\f0\b0\
\f0\fs28\li2500 -{\b find}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Returns the first member which is the same as {\i anObject}, i.e., which is pointer equal.  If none is found, returns {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 findMatching:\f0\b0\
\f0\fs28\li2500 -{\b findMatching}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Returns the first member which matches {\i anObject}, i.e., using {\f2 isEqual:} for comparison.  If none is found, returns {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 includes:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b includes}:{\i anObject}\fs16\
\
\f0\fs28\li2200 This method returns YES if {\i anObject} is in the collection (in the sense of {\f2 isEqual:}).  It has therefore the same semantics as {\f2 includes:} of the {\b Set} class.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 findSTR:\f0\b0\
\f0\fs28\li2500 -{\b findSTR}:(STR ){\i aString}\fs16\
\
\f0\fs28\li2200 Returns the first member whose string contents matches {\i aString}, using the {\f2 isEqualSTR:} method for comparison.  If none is found, returns {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 contains:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b contains}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Returns YES if the receiver contains {\i anObject}.  Otherwise, returns NO.  Implementation is in terms of the receiver's {\f2 find:} method (which uses {\f2 isSame}, not {\f2 isEqual:}).\fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} To get the behavior of the method {\f2 contains:} of the Set class (which uses {\f2 isEqual:}), use {\f2 findMatching:} or {\f2 includes:}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 offsetOf:\f0\b0\
\f0\fs28\li2500 - (unsigned){\b offsetOf}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Searches for {\i anObject} in the contents and returns the offset of the {\b first} pointer equal object it finds.  Otherwise, returns (unsigned)-1.  If {\i anObject} is {\b nil}, also returns (unsigned)-1.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 printOn:\f0\b0\
\f0\fs28\li2500 -{\b printOn}:(IOD){\i aFile}\fs16\
\
\f0\fs28\li2200 Prints a list of the objects in the objects by sending each individual object a {\f2 printOn:} message.  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 fileOutOn:\f0\b0\
\f0\fs28\li2500 -{\b fileOutOn}:{\i aFiler}\fs16\
\
\f0\fs28\li2200 Writes the collection on {\i aFiler}.  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 fileInFrom:\f0\b0\
\f0\fs28\li2500 -{\b fileInFrom}:{\i aFiler}\fs16\
\
\f0\fs28\li2200 Reads a string object from {\i aFiler}.  Returns the receiver.\fs16\
\
\fs16\
\
\
}
