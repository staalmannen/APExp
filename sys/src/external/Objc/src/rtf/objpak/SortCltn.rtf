{\rtf1\ansi{\fonttbl\f0\fnil Times-Roman;\f1\fswiss Helvetica;\f2\fmodern Courier;}\paperw12000\paperh8000\margl40\margr40
\pard\f0\fs24\cf0 Portable Object Compiler (c) 1997,98,2003.  All Rights Reserved.\fs16\
\
\
\
\
\
\
\f1\b\fs56\li2200 SortCltn\f0\b0\fs16\
\
\
\
\
\
\f0\fs28\li2200 {\b {\f1 Inherits from:}} Cltn\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Class Description\b0\f0\fs16\
\
\f0\fs28\li2200 {\b SortCltn} (alias {\b SortedCollection}) instances are groups of objects that are kept in sorted order in a tree (by default, the first object is the smallest with respect to {\f2 compare:}).  Inserting and searching objects in such a sorted collection can be faster than using, say an {\b OrdCltn} object collection.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Creating An Instance\b0\f0\fs16\
\
\f0\fs28\li2200 The method {\f2 new} creates an instance that sorts its elements with respect to {\f2 compare:}.  The method {\f2 newDictCompare} sends {\f2 dictCompare:} messages to compare pairs of elements.  Finally, the method {\f2 sortBy::} creates a SortCltn that will sort its contents with respect to an arbitrary Block.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Adding Objects\b0\f0\fs16\
\
\f0\fs28\li2200 Normally, you insert an object with the {\f2 add:} method.  This method allows you to add an object to the collection, even when it is equal to an element in the collection (when the comparison method returns zero; because you can use a different method than {\f2 compare:}, this doesn't necessarily mean that {\f2 isEqual:} returns YES).\fs16\
\
\f0\fs28\li2200 You can also choose not to add duplicate entries.  The {\f2 addNTest:} method adds if the object was absent and returns a value that can be used to test whether the object was found or not. The {\f2 filter:} method frees a new entry when it's a duplicate.  The {\f2 replace:} method always replaces duplicates (returning the object that was previously in the collection).\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Sorting collections \b0\f0\fs16\
\
\f0\fs28\li2200 One use of {\b SortCltn} instances, is to sort collections of objects.  For example,\fs16\
\
\f2\fs24\li2800 aSortCltn = [[SortCltn new] addAll:aCltn];\
\f0\fs16\
\f0\fs28\li2200 will sequence of the contents of {\i aCltn} and will add the members of the collection to a new SortCltn instance.  This is equivalent to sorting the collection.  To obtain a sorted {\b OrdCltn} instance (as opposed to a {\b SortCltn}), simply convert back like this,\fs16\
\
\f2\fs24\li2800 aCltn = [[OrdCltn new] addAll:aSortCltn];\
\f0\fs16\
\f0\fs28\li2200 To filter out duplicate entries, it's also possible to insert a Set instance in the conversion process.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Method types\b0\f0\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Creation}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- new\
	- new:\
	- newDictCompare\
	- sortBy:\
	- sortBlock:\
	- newCmpSel:\
	- with:\
	- with:with:\
	- add:\
	- copy\
	- deepCopy\
	- emptyYourself\
	- freeContents\
	- free\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Interrogation}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- size\
	- isEmpty\
	- eachElement\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Comparing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- hash\
	- isEqual:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Adding}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- add:\
	- addNTest:\
	- filter:\
	- replace:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Removing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- remove:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Testing Contents}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- includesAllOf:\
	- includesAnyOf:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Adding and Removing Contents}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- addAll:\
	- addContentsOf:\
	- addContentsTo:\
	- removeAll:\
	- removeContentsFrom:\
	- removeContentsOf:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Combining}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- intersection:\
	- union:\
	- difference:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Converting}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- asSet\
	- asOrdCltn\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Using Blocks}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- detect:\
	- detect:ifNone:\
	- select:\
	- reject:\
	- collect:\
	- count:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Making elements perform}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- elementsPerform:\
	- elementsPerform:with:\
	- elementsPerform:with:with:\
	- elementsPerform:with:with:with:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Do Blocks}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- do:\
	- do:until:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Locating}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- find:\
	- contains:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Printing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- printOn:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Archiving}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- fileOutOn:\
	- fileInFrom:\
\pard\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Methods\b0\f0\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 new\f0\b0\
\f0\fs28\li2500 +{\b new}\fs16\
\
\f0\fs28\li2200 Returns a new instance that sorts its contents with respect to {\f2 compare:}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 new:\f0\b0\
\f0\fs28\li2500 +{\b new}:(unsigned){\i n}\fs16\
\
\f0\fs28\li2200 For this class, this method does not differ from {\f2 new}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 newDictCompare\f0\b0\
\f0\fs28\li2500 +{\b newDictCompare}\fs16\
\
\f0\fs28\li2200 Returns a new instance that sorts its contents with respect to {\f2 dictCompare:}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 sortBy:\f0\b0\
\f0\fs28\li2500 +{\b sortBy}:{\i sortBlock}\fs16\
\
\f0\fs28\li2200 Returns a new instance that sorts its contents with respect to {\i sortBlock}.  This block should take two objects {\i a} and {\i b} as argument, and return a positive value if {\i a} is greater than {\i b}, or zero if {\i a} and {\i b} are equal, and a negative value if {\i a} is less than {\i b}.\fs16\
\
\f2\fs24\li2800 id c;\
int r;\
c = [SortCltn sortBy:\{ :a:b | [a compare:b] \}];\
\f0\fs16\
\fs16\
\
\f1\b\fs28\li2200 sortBlock:\f0\b0\
\f0\fs28\li2500 +{\b sortBlock}:{\i sortBlock}\fs16\
\
\f0\fs28\li2200 Same as {\f2 sortBy:}.\fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} There is a SortedCollection method with a similar name in {\i Squeak}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 newCmpSel:\f0\b0\
\f0\fs28\li2500 +{\b newCmpSel}:(SEL){\i aSel}\fs16\
\
\f0\fs28\li2200 For backwards compatibility only.  {\f2 sortBy:} provides a more powerful mechanism to sort given an arbitrary sort block.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 with:\f0\b0\
\f0\fs28\li2500 +{\b with}:(int){\i nArgs,...}\fs16\
\
\f0\fs28\li2200 Returns a new object with {\i nArgs} elements.  For example,\fs16\
\
\f2\fs24\li2800 id aCltn = [OrdCltn with:2,anObject,otherObject];\
\f0\fs16\
\f0\fs28\li2200 creates a collection and adds {\i anObject} and {\i otherObject} to it.  In a similar way, {\b Set} or {\b SortCltn} instances can be created like this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 with:with:\f0\b0\
\f0\fs28\li2500 +{\b with}:{\i firstObject}{\b with}:{\i nextObject}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 with:} 2,{\i firstObject},{\i nextObject}. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 add:\f0\b0\
\f0\fs28\li2500 +{\b add}:{\i firstObject}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 with:} 1,{\i firstObject}. \fs16\
\
\f0\fs28\li2200 This (factory) method has the same name as the instance method {\f2 add:} and can be used as follows, in circumstances when the user does not want to allocate a collection unless it is actually used :\fs16\
\
\f2\fs24\li2800 aCltn = [ (aCltn)?aCltn:OrdCltn add:myObject ];\
\f0\fs16\
\f0\fs28\li2200 This shows that creation of the collection is delayed until it is actually needed.  If the collection already exists, objects are simply added, using the instance method {\f2 add:}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 copy\f0\b0\
\f0\fs28\li2500 -{\b copy}\fs16\
\
\f0\fs28\li2200 Returns a new copy of the object (without copying the elements).\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 deepCopy\f0\b0\
\f0\fs28\li2500 -{\b deepCopy}\fs16\
\
\f0\fs28\li2200 Returns a new copy of the object.  The elements in the new copy are deep copies of the elements in the original object.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 emptyYourself\f0\b0\
\f0\fs28\li2500 -{\b emptyYourself}\fs16\
\
\f0\fs28\li2200 Empties all the members of the object (without freeing them).  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 freeContents\f0\b0\
\f0\fs28\li2500 -{\b freeContents}\fs16\
\
\f0\fs28\li2200 Removes and frees the contents of the object, but doesn't free the object itself.  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 free\f0\b0\
\f0\fs28\li2500 -{\b free}\fs16\
\
\f0\fs28\li2200 Frees the object, but not its contents.  Returns {\b nil}.  Do :\fs16\
\
\f2\fs24\li2800 aSort = [[aSort freeContents] free];\
\f0\fs16\
\f0\fs28\li2200 if you want to free the object and its contents.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 size\f0\b0\
\f0\fs28\li2500 - (unsigned){\b size}\fs16\
\
\f0\fs28\li2200 Returns the number of elements in the object.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isEmpty\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isEmpty}\fs16\
\
\f0\fs28\li2200 Whether the number of elements is equal to zero.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 eachElement\f0\b0\
\f0\fs28\li2500 -{\b eachElement}\fs16\
\
\f0\fs28\li2200 Returns a sequence of sorted elements.  The first element in the sequence is the smallest with respect to the ordering.\fs16\
\
\f2\fs24\li2800 aSeq = [aSort eachElement];\
while ((anElement = [aSeq next])) \{\
    /* do something */\
\}\
aSeq = [aSeq free];\
\f0\fs16\
\fs16\
\
\f1\b\fs28\li2200 hash\f0\b0\
\f0\fs28\li2500 - (unsigned){\b hash}\fs16\
\
\f0\fs28\li2200 Returns a hash value based on the receiver's address and the results of sending the {\f2 hash} message to the contents.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isEqual:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isEqual}:{\i aSort}\fs16\
\
\f0\fs28\li2200 Returns YES if {\i aSort} is an {\b SortCltn} instance, and if each member of its contents responds affirmatively to the message {\f2 isEqual:} when compared to the corresponding member of the receiver's contents.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 add:\f0\b0\
\f0\fs28\li2500 -{\b add}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Adds {\i anObject} to the receiver, keeping the contents of the object sorted.  Duplicate entries are allowed.  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addNTest:\f0\b0\
\f0\fs28\li2500 -{\b addNTest}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Adds {\i anObject} if it was not previously in the set.  Returns {\i anObject} if the addition takes place, otherwise returns {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 filter:\f0\b0\
\f0\fs28\li2500 -{\b filter}:{\i anObject}\fs16\
\
\f0\fs28\li2200 If {\i anObject} compares equally to some object in the contents of the receiver, then {\i anObject} is freed, and the matching object is returned.  Otherwise, {\i anObject} is added and returned.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 replace:\f0\b0\
\f0\fs28\li2500 -{\b replace}:{\i anObject}\fs16\
\
\f0\fs28\li2200 If a matching object is found, then {\i anObject} replaces that object, and the matching object is returned.  If there is no matching object, {\i anObject} is added to the receiver, and {\b nil} is returned.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 remove:\f0\b0\
\f0\fs28\li2500 -{\b remove}:{\i oldObject}\fs16\
\
\f0\fs28\li2200 Removes {\i oldObject} or the element that matches (when the compare method returns zero).  Returns the removed entry, or {\b nil} if there is no matching entry.\fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} Not implemented\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 includesAllOf:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b includesAllOf}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Answer whether all the elements of {\i aCltn} are in the receiver, by sending {\f2 includes:} for each individual element.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 includesAnyOf:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b includesAnyOf}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Answer whether any element of {\i aCltn} is in the receiver, by sending {\f2 includes:} for each individual element.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addAll:\f0\b0\
\f0\fs28\li2500 -{\b addAll}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Adds each member of {\i aCltn} to the receiver.  If {\i aCltn} is {\b nil}, no action is taken.  The argument {\i aCltn} need not be a collection, so long as it responds to {\f2 eachElement} in the same way as collections do.  Returns the receiver.\fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} If {\i aCltn} is the same object as the receiver, a {\f2 addYourself} message is sent to the object.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addContentsOf:\f0\b0\
\f0\fs28\li2500 -{\b addContentsOf}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 addAll:} and is provided for Stepstone ICpak101 compatibility.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addContentsTo:\f0\b0\
\f0\fs28\li2500 -{\b addContentsTo}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 addAll:}, but with argument and receiver interchanged, and is provided for Stepstone ICpak101 compatibility.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeAll:\f0\b0\
\f0\fs28\li2500 -{\b removeAll}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Removes all of the members of {\i aCltn} from the receiver. The argument {\i aCltn} need not be a collection, as long as it responds to {\f2 eachElement} as collections do.  Returns the receiver. \fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} If {\i aCltn} is the same object as the receiver, it empties itself using {\f2 emptyYourself} and returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeContentsFrom:\f0\b0\
\f0\fs28\li2500 -{\b removeContentsFrom}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 removeAll:}, and is provided for compatibility with Stepstone ICpak101.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeContentsOf:\f0\b0\
\f0\fs28\li2500 -{\b removeContentsOf}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 This method is equivalent to {\f2 removeAll:}, and is provided for compatibility with Stepstone ICpak101.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 intersection:\f0\b0\
\f0\fs28\li2500 -{\b intersection}:{\i bag}\fs16\
\
\f0\fs28\li2200 Returns a new Collection which is the intersection of the receiver and {\i bag}.  The new Collection contains only those elements that were in both the receiver and {\i bag}.  The argument {\i bag} need not be an actual {\b Set} or {\b Bag} instance, as long as it implements {\f2 find:} as Sets do.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 union:\f0\b0\
\f0\fs28\li2500 -{\b union}:{\i bag}\fs16\
\
\f0\fs28\li2200 Returns a new Collection which is the union of the receiver and {\i bag}.  The new Collection returned has all the elements from both the receiver and {\i bag}.  The argument {\i bag} need not be an actual {\b Set} or {\b Bag} instance, as long as it implements {\f2 eachElement:} as Sets and Bags do.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 difference:\f0\b0\
\f0\fs28\li2500 -{\b difference}:{\i bag}\fs16\
\
\f0\fs28\li2200 Returns a new Collection which is the difference of the receiver and {\i bag}.  The new Collection returned has only those elements in the receiver that are not in {\i bag}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 asSet\f0\b0\
\f0\fs28\li2500 -{\b asSet}\fs16\
\
\f0\fs28\li2200 Creates a {\b Set} instance and adds the contents of the object to the set.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 asOrdCltn\f0\b0\
\f0\fs28\li2500 -{\b asOrdCltn}\fs16\
\
\f0\fs28\li2200 Creates a {\b OrdCltn} instance and adds the contents of the object to the set.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 detect:\f0\b0\
\f0\fs28\li2500 -{\b detect}:{\i aBlock}\fs16\
\
\f0\fs28\li2200 This message returns the first element in the receiver for which {\i aBlock} evaluates to something that is non-nil .  For example, the following :\fs16\
\
\f2\fs24\li2800 [ aCltn detect: \{ :each | [each isEqual:anObject] \} ];\
\f0\fs16\
\f0\fs28\li2200 Returns {\b nil} if there's no element for which {\i aBlock} evaluates to something that non-nil.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 detect:ifNone:\f0\b0\
\f0\fs28\li2500 -{\b detect}:{\i aBlock}{\b ifNone}:{\i noneBlock}\fs16\
\
\f0\fs28\li2200 This message returns the first element in the receiver for which {\i aBlock} evaluates to something that is non-nil.\fs16\
\
\f0\fs28\li2200 Evaluates {\i noneBlock} if there's no element for which {\i aBlock} evaluates to something that is non-nil, and returns the return value of that block.  For example,\fs16\
\
\f2\fs24\li2800 [ aCltn detect: \{ :e | [e isEqual:anObject]\} ifNone: \{anObject\} ];\
\f0\fs16\
\fs16\
\
\f1\b\fs28\li2200 select:\f0\b0\
\f0\fs28\li2500 -{\b select}:{\i testBlock}\fs16\
\
\f0\fs28\li2200 This message will return a subset of the receiver containing all elements for which {\i testBlock} evaluates to an Object that is non-nil.  For example,\fs16\
\
\f2\fs24\li2800 [ aCltn select: \{ :each | [each isEqual:anObject] \} ];\
\f0\fs16\
\f0\fs28\li2200 Returns a new empty instance of the same class as the receiver, if there's no element for which {\i testBlock} evaluates to something that is non-nil. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 reject:\f0\b0\
\f0\fs28\li2500 -{\b reject}:{\i testBlock}\fs16\
\
\f0\fs28\li2200 Complement of {\f2 select:}\fs16\
\
\f0\fs28\li2200 This message will return a subset of the receiver containing all elements for which {\i testBlock} evaluates to nil.  For example,\fs16\
\
\f2\fs24\li2800 [ aCltn reject: \{ :each | [each isEqual:anObject] \} ];\
\f0\fs16\
\f0\fs28\li2200 Returns a new empty instance of the same class as the receiver, if there's no element for which {\i testBlock} evaluates to nil.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 collect:\f0\b0\
\f0\fs28\li2500 -{\b collect}:{\i transformBlock}\fs16\
\
\f0\fs28\li2200 This message creates and returns a new collection of the same size and type as the receiver. The elements are the result of performing {\i transformBlock} on each element in the receiver (elements for which the Block would return {\b nil} are filtered out).\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 count:\f0\b0\
\f0\fs28\li2500 - (unsigned){\b count}:{\i aBlock}\fs16\
\
\f0\fs28\li2200 Evaluate {\i aBlock} with each of the receiver's elements as the argument.  Return the number that answered a non-{\b nil} value.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 elementsPerform:\f0\b0\
\f0\fs28\li2500 -{\b elementsPerform}:(SEL){\i aSelector}\fs16\
\
\f0\fs28\li2200 Send {\i aSelector} to all objects in the collection, starting from the object at offset {\i 0}.  For Stepstone compatibility.  Producer uses this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 elementsPerform:with:\f0\b0\
\f0\fs28\li2500 -{\b elementsPerform}:(SEL){\i aSelector}{\b with}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Send {\i aSelector} to all objects in the collection, starting from the object at offset {\i 0}.  For Stepstone compatibility.  Producer uses this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 elementsPerform:with:with:\f0\b0\
\f0\fs28\li2500 -{\b elementsPerform}:(SEL){\i aSelector}{\b with}:{\i anObject}{\b with}:{\i otherObject}\fs16\
\
\f0\fs28\li2200 Send {\i aSelector} to all objects in the collection, starting from the object at offset {\i 0}.  For Stepstone compatibility.  Producer uses this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 elementsPerform:with:with:with:\f0\b0\
\f0\fs28\li2500 -{\b elementsPerform}:(SEL){\i aSelector}{\b with}:{\i anObject}{\b with}:{\i otherObject}{\b with}:{\i thirdObj}\fs16\
\
\f0\fs28\li2200 Send {\i aSelector} to all objects in the collection, starting from the object at offset {\i 0}.  For Stepstone compatibility.  ICpak201 uses this.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 do:\f0\b0\
\f0\fs28\li2500 -{\b do}:{\i aBlock}\fs16\
\
\f0\fs28\li2200 Evaluates {\i aBlock} for each element in the collection and returns {\b self}.  {\i aBlock} must be a block taking one object (element) as argument; the return value of the block is ignored by this method.\fs16\
\
\f0\fs28\li2200 Often, the Block would, as a side-effect, modify a variable, as in:\fs16\
\
\f2\fs24\li2800 int count = 0;\
[contents do: \{ :what | if (what == anObject) count++; \}];\
\f0\fs16\
\fs16\
\
\f1\b\fs28\li2200 do:until:\f0\b0\
\f0\fs28\li2500 -{\b do}:{\i aBlock}{\b until}:(BOOL*){\i flag}\fs16\
\
\f0\fs28\li2200 Evaluates {\i aBlock} for each element in the collection, or until the variable pointed to by {\i flag} becomes true, and returns {\b self}.  {\i aBlock} must be a block taking one object (element) as argument; the return value of the block is ignored by this method.\fs16\
\
\f0\fs28\li2200 Typically the Block will modify the variable {\i flag} when some condition holds:\fs16\
\
\f2\fs24\li2800 BOOL found = NO;\
[contents do:\{ :what | if (what == findObject) found=YES;\} until:&found];\
if (found) \{ ... \}\
\f0\fs16\
\fs16\
\
\f1\b\fs28\li2200 find:\f0\b0\
\f0\fs28\li2500 -{\b find}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Returns any element in the receiver which {\f2 isEqual:} to {\i anObject}.  Otherwise, returns {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 contains:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b contains}:{\i anObject}\fs16\
\
\f0\fs28\li2200 Returns YES if the receiver contains {\i anObject}.  Otherwise, returns NO.  Implementation is in terms of the receiver's {\f2 find:} method.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 printOn:\f0\b0\
\f0\fs28\li2500 -{\b printOn}:(IOD){\i aFile}\fs16\
\
\f0\fs28\li2200 Prints a comma separated list of the objects in the set by sending each individual object a {\f2 printOn:} message.  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 fileOutOn:\f0\b0\
\f0\fs28\li2500 -{\b fileOutOn}:{\i aFiler}\fs16\
\
\f0\fs28\li2200 Writes the tree and all its elements to {\i aFiler}.  Returns the receiver.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 fileInFrom:\f0\b0\
\f0\fs28\li2500 -{\b fileInFrom}:{\i aFiler}\fs16\
\
\f0\fs28\li2200 Reads the tree and all its elements from {\i aFiler}.  Returns the receiver.\fs16\
\
\fs16\
\
\
}
