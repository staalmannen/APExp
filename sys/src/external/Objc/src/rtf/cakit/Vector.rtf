{\rtf1\ansi{\fonttbl\f0\fnil Times-Roman;\f1\fswiss Helvetica;\f2\fmodern Courier;}\paperw12000\paperh8000\margl40\margr40
\pard\f0\fs24\cf0 Computer Algebra Kit (c) 1993,00 by Comp.Alg.Objects.  All Rights Reserved.\fs16\
\
\
\
\
\
\
\f1\b\fs56\li2200 Vector\f0\b0\fs16\
\
\
\
\
\
\f0\fs28\li2200 {\b {\f1 Inherits from:}} CAObject\fs16\
\
\f0\fs28\li2200 {\b {\f1 Maturity Index:}} Relatively mature\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Class Description\b0\f0\fs16\
\
\f0\fs28\li2200 A vector consists of a number of {\i scalars} that can be arbitrary Computer Algebra Kit objects, but they currently have to be either floating-point or elements of a field (see {\b inField}) or elements of an integral domain (see {\b inIntegralDomain}).\fs16\
\
\f0\fs28\li2200 There are methods to access, insert and remove scalars.  It's also possible to place or replace a scalar directly at a given index.  See the documentation on {\b eachScalar} to access the scalar at a given index.\fs16\
\
\f0\fs28\li2200 {\b {\f1 Note:}} Vector objects are meant for computational tasks.  They are no substitute for List or Collection objects, that are better suited for the purpose of storing objects.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Method types\b0\f0\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Creation}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- collection:\
	- scalarZero:numScalars:\
	- copy\
	- deepCopy\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Identity}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- scalarZero\
	- numScalars\
	- hash\
	- isEqual:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Insertion Scalars}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- insertScalar:\
	- insertScalar:at:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Removing Scalars}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- removeScalar\
	- removeScalarAt:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Placing and Replacing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- placeScalar:at:\
	- replaceScalarAt:with:\
	- asCollection\
	- asNumerical\
	- asModp:\
	- onCommonDenominator:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Accessing Scalars}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- eachScalar\
	- floatValueAt:\
	- intValueAt:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Addition}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- zero\
	- isZero\
	- isOpposite:\
	- negate\
	- double\
	- add:\
	- subtract:\
	- addScalar:at:\
	- subtractScalar:at:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Scalar Multiplication}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- multiplyScalar:\
	- divideScalar:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Multiplication}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- dotSquare\
	- dotMultiply:\
	- multiplyLeftMatrix:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Printing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- printOn:\
\pard\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Methods\b0\f0\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 collection:\f0\b0\
\f0\fs28\li2500 +{\b collection}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Creates a vector containing references to the scalars from {\i aCltn}.  The collection must not be empty.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 scalarZero:numScalars:\f0\b0\
\f0\fs28\li2500 +{\b scalarZero}:{\i aScalarZero}{\b numScalars}:(int){\i numScalars}\fs16\
\
\f0\fs28\li2200 Creates a new vector with {\i numScalars} zero scalars.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 copy\f0\b0\
\f0\fs28\li2500 -{\b copy}\fs16\
\
\f0\fs28\li2200 Returns a new vector. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 deepCopy\f0\b0\
\f0\fs28\li2500 -{\b deepCopy}\fs16\
\
\f0\fs28\li2200 Returns a new vector.  Sends {\b deepCopy} messages to the scalars in the vector.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 scalarZero\f0\b0\
\f0\fs28\li2500 -{\b scalarZero}\fs16\
\
\f0\fs28\li2200 Returns the zero scalar element. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 numScalars\f0\b0\
\f0\fs28\li2500 - (int){\b numScalars}\fs16\
\
\f0\fs28\li2200 Returns the number of scalar objects in the vector.  Returns 0 if the vector is empty.  The first scalar in the vector is at index 0, the last scalar at {\i numScalars} minus one.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 hash\f0\b0\
\f0\fs28\li2500 - (unsigned){\b hash}\fs16\
\
\f0\fs28\li2200 Returns a small integer that is the same for objects that are equal (in the sense of {\b isEqual:}).\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isEqual:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isEqual}:{\i b}\fs16\
\
\f0\fs28\li2200 Whether the two objects are equal.  Returns YES if the objects are pointer equal.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 insertScalar:\f0\b0\
\f0\fs28\li2500 -{\b insertScalar}:{\i aScalar}\fs16\
\
\f0\fs28\li2200 Inserts {\i aScalar} as first entry and returns {\b self}.  The object {\i aScalar} belongs to the vector after insertion, and is not necessarily copied.  To insert a scalar, the reference count of the vector should be equal to one.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 insertScalar:at:\f0\b0\
\f0\fs28\li2500 -{\b insertScalar}:{\i aScalar}{\b at}:(int){\i i}\fs16\
\
\f0\fs28\li2200 Inserts {\i aScalar} as i-th entry and returns {\b self}.  The object {\i aScalar} belongs to the vector after insertion, and is not necessarily copied.  If {\i i} is equal to zero, this method is identical to {\b -insertScalar:}.  If {\i i} is equal to {\b numScalars}, this method inserts the scalar as last element.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeScalar\f0\b0\
\f0\fs28\li2500 -{\b removeScalar}\fs16\
\
\f0\fs28\li2200 Removes (and returns) the first scalar in the vector (the scalar at index 0).  Returns {\b nil} if there were no more elements left.  This can be used in the following way :\fs16\
\
\f2\fs24\li2800 while ((c = [vector removeScalar])) \{ /* do something with c */ \}\
\f0\fs16\
\f0\fs28\li2200 To remove a scalar, the reference count of the vector should be equal to one.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeScalarAt:\f0\b0\
\f0\fs28\li2500 -{\b removeScalarAt}:(int){\i i}\fs16\
\
\f0\fs28\li2200 Removes and returns the i-th scalar in the vector.  If {\i i} is zero, this method is identical to {\b removeScalar}.  Unlike {\b removeScalar}, which returns {\b nil} if there are no more scalars in the vector, this method generates an error message if you attempt to remove a scalar at an illegal index.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 placeScalar:at:\f0\b0\
\f0\fs28\li2500 -{\b placeScalar}:{\i aScalar}{\b at}:(int){\i i}\fs16\
\
\f0\fs28\li2200 Frees the scalar at position {\i i} and replaces it by the scalar object {\i aScalar}.  Returns {\b self}.  The scalar {\i aScalar} belongs to the receiving vector object; it is not necessarily copied.  This is similar to List's -addObject: method.  It is an error to use an illegal index {\i i} or to attempt to set a scalar in a vector whose reference count is not equal to one.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 replaceScalarAt:with:\f0\b0\
\f0\fs28\li2500 -{\b replaceScalarAt}:(int){\i i}{\b with}:{\i aScalar}\fs16\
\
\f0\fs28\li2200 Similar to {\b placeScalar:at:} but returns the scalar at position {\i i} after replacing it by {\i aScalar}.  It is an error to use an illegal index {\i i} or to attempt to replace a scalar in a vector whose reference count is not equal to one.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 asCollection\f0\b0\
\f0\fs28\li2500 -{\b asCollection}\fs16\
\
\f0\fs28\li2200 Returns a new collection containing new references to the scalars in the vector.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 asNumerical\f0\b0\
\f0\fs28\li2500 -{\b asNumerical}\fs16\
\
\f0\fs28\li2200 Returns a new vector, whose scalars are the numerical value of the scalars of the original vector.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 asModp:\f0\b0\
\f0\fs28\li2500 -{\b asModp}:(unsigned short){\i p}\fs16\
\
\f0\fs28\li2200 Returns a new vector, whose scalars are the value of the scalars of the original vector mod {\i p}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 onCommonDenominator:\f0\b0\
\f0\fs28\li2500 -{\b onCommonDenominator}:(id *){\i denominator}\fs16\
\
\f0\fs28\li2200 Puts a vector with fractional scalars on a common denominator.  Returns a new vector with integral scalars, and, by reference, the common denominator of the scalars in the vector.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 eachScalar\f0\b0\
\f0\fs28\li2500 -{\b eachScalar}\fs16\
\
\f0\fs28\li2200 Returns a new sequence object that gives access to the scalars of the vector.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 floatValueAt:\f0\b0\
\f0\fs28\li2500 - (float){\b floatValueAt}:(int){\i i}\fs16\
\
\f0\fs28\li2200 Returns the {\b floatValue} of the scalar at the {\i i}-th position.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 intValueAt:\f0\b0\
\f0\fs28\li2500 - (int){\b intValueAt}:(int){\i i}\fs16\
\
\f0\fs28\li2200 Returns the {\b intValue} of the scalar at the {\i i}-th position.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 zero\f0\b0\
\f0\fs28\li2500 -{\b zero}\fs16\
\
\f0\fs28\li2200 Returns a vector of the same dimension as the object that receives the message, but all filled with zero scalars.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isZero\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isZero}\fs16\
\
\f0\fs28\li2200 Whether the object is equal to zero.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isOpposite:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isOpposite}:{\i b}\fs16\
\
\f0\fs28\li2200 Whether the object is the opposite of {\i b}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 negate\f0\b0\
\f0\fs28\li2500 -{\b negate}\fs16\
\
\f0\fs28\li2200 Returns the opposite of the object.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 double\f0\b0\
\f0\fs28\li2500 -{\b double}\fs16\
\
\f0\fs28\li2200 Returns a new object, equal to the object multiplied by two i.e., added to itself.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 add:\f0\b0\
\f0\fs28\li2500 -{\b add}:{\i b}\fs16\
\
\f0\fs28\li2200 Adds {\i b} to the object.  Returns a new object.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 subtract:\f0\b0\
\f0\fs28\li2500 -{\b subtract}:{\i b}\fs16\
\
\f0\fs28\li2200 Subtracts {\i b} from the object.  Returns a new object.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 addScalar:at:\f0\b0\
\f0\fs28\li2500 -{\b addScalar}:{\i s}{\b at}:(int){\i i}\fs16\
\
\f0\fs28\li2200 Returns a {\b new} vector.  Adds {\i s} to the scalar at position {\i i}, and replaces the scalar by the sum.  {\i i} must be between 0 and the number of scalars in the vector.  This method is {\i not} an insertion method.\fs16\
\
\f0\fs28\li2200 {\b {\f1 See also:}} insertScalar:at:, replaceScalar:at:\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 subtractScalar:at:\f0\b0\
\f0\fs28\li2500 -{\b subtractScalar}:{\i s}{\b at}:(int){\i i}\fs16\
\
\f0\fs28\li2200 Returns a {\b new} vector.  Subtracts {\i s} from the scalar at position {\i i}.  {\i i} must be between 0 and the number of scalars in the vector.  This method is {\i not} an insertion method.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 multiplyScalar:\f0\b0\
\f0\fs28\li2500 -{\b multiplyScalar}:{\i s}\fs16\
\
\f0\fs28\li2200 Multiplies by the scalar {\i s}.  Returns a new object.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 divideScalar:\f0\b0\
\f0\fs28\li2500 -{\b divideScalar}:{\i s}\fs16\
\
\f0\fs28\li2200 Exact division by the scalar {\i s}.  Returns a new object, or {\b nil} if the division is not exact.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 dotSquare\f0\b0\
\f0\fs28\li2500 -{\b dotSquare}\fs16\
\
\f0\fs28\li2200 Returns a new scalar product, the dot product of the vector by itself, defined as the sum of squares of the scalars in the vector.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 dotMultiply:\f0\b0\
\f0\fs28\li2500 -{\b dotMultiply}:{\i aVector}\fs16\
\
\f0\fs28\li2200 Returns a new scalar product, the dot product of the vector {\i self} by {\i aVector}, defined as the sum of the products of the scalars in the vectors.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 multiplyLeftMatrix:\f0\b0\
\f0\fs28\li2500 -{\b multiplyLeftMatrix}:{\i aMatrix}\fs16\
\
\f0\fs28\li2200 Returns a new vector, the product of {\i aMatrix} by the column vector {\i self}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 printOn:\f0\b0\
\f0\fs28\li2500 -{\b printOn}:(IOD){\i aFile}\fs16\
\
\f0\fs28\li2200 Prints, between braces, a comma separated list of the scalars (by sending   {\b printOn:} messages to the scalars).\fs16\
\
\fs16\
\
\
}
