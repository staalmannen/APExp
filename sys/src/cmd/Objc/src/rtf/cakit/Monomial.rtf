{\rtf1\ansi{\fonttbl\f0\fnil Times-Roman;\f1\fswiss Helvetica;\f2\fmodern Courier;}\paperw12000\paperh8000\margl40\margr40
\pard\f0\fs24\cf0 Computer Algebra Kit (c) 1993,00 by Comp.Alg.Objects.  All Rights Reserved.\fs16\
\
\
\
\
\
\
\f1\b\fs56\li2200 Monomial\f0\b0\fs16\
\
\
\
\
\
\f0\fs28\li2200 {\b {\f1 Inherits from:}} CAObject\fs16\
\
\f0\fs28\li2200 {\b {\f1 Maturity Index:}} Relatively mature\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Class Description\b0\f0\fs16\
\
\f0\fs28\li2200 A monomial consists of a scalar object {\i scalar} multiplied by a product of terms; each term consists of a scalar {\i coefficient} multiplied by a {\i symbol} raised to a nonnegative {\i exponent} (see the documentation on {\b Term}).  The {\i degree} of a monomial is the sum of the exponents of its terms.  A monomial can be either variable sparse or variable dense : the terms of a variable dense monomial are represented by a dense array of exponents, where the size of the array is equal to the number of symbols.  The exponent of a term can be equal to zero.  In a variable sparse monomial, terms with exponent equal to zero are not stored.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Scalar of a Monomial\b0\f0\fs16\
\
\f0\fs28\li2200 When a term is inserted into a monomial (see {\b insertTerm:}), its coefficient is multiplied together with the scalar of the monomial; it follows that a monomial consists internally of a scalar multiplied by a product of {\i monic} terms (a 'power product').  The methods {\b leadingTerm}, {\b removeTerm}, {\b eachTerm} etc. return monic terms.  A monomial is said to be {\i monic} if its scalar is equal to one.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Symbols and Variable Ordering\b0\f0\fs16\
\
\f0\fs28\li2200 For a variable dense monomial, the collection of symbols is fixed when the monomial is created; you can't insert terms in a different symbol.  In the variable sparse case, the collection of symbols is dynamically adapted as you insert terms.  Note that, in both cases - variable sparse or variable dense -, the collection of symbols contains the actual set of symbols (those that actually occur in the monomial with nonzero exponent) as a {\i subset}.   See the documentation on {\b findSymbols}.  The variable ordering imposed by the ordering of the collection of symbols is called {\i lexicographic} (currently the variable ordering is always lexicographic).  Monomials can be compared with respect to this ordering.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Conversion between Representations\b0\f0\fs16\
\
\f0\fs28\li2200 It suffices to remove terms from a monomial in one representation and to insert them into another; abstractly, both kind of monomials, are collections of terms.\fs16\
\
\f2\fs24\li2800 sparse = [Monomial scalar:[dense scalar]];\
while ((term = [dense removeTerm])) [sparse insertTerm:term];\
\f0\fs16\
\f0\fs28\li2200 The example shows how to, destructively, convert from the variable dense into the variable sparse representation (see also {\b makeVariableSparse}).  Note that when you create a variable sparse monomial, you don't have to specify the symbols in advance. \fs16\
\
\f2\fs24\li2800 dense = [Monomial scalar:[sparse scalar] symbols:[sparse findSymbols]];\
while (term = [sparse removeTerm]) [dense insertTerm:term];\
\f0\fs16\
\f0\fs28\li2200 The above example shows how to, destructively, convert from the variable sparse into the variable dense representation  (see also {\b makeVariableDense}).  To create a variable dense monomial, you have to fix the symbols prior to inserting terms.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Polynomials\b0\f0\fs16\
\
\f0\fs28\li2200 A polynomial in expanded (or 'distributed') representation is a sum of monomials.  Although a polynomial in recursive representation is {\i not} a sum of monomials (it's a sum of terms), recursive polynomials can to some extent be manipulated as sequences of monomials (see Polynomial's method {\b eachSequence}).  Note that in the recursive case, the scalars for monomials are taken from the (base) scalar ring.\fs16\
\
\f0\fs28\li2200 The monomials in a variable sparse polynomial, are variable sparse.  Likewise, the monomials in a variable dense polynomial, are variable dense.  For a degree dense polynomial, the scalars of the monomials can be zero, while for a degree sparse polynomial they cannot.\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Method types\b0\f0\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Creation}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- scalar:\
	- scalar:symbols:\
	- empty\
	- copy\
	- deepCopy\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Coercion}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- intValue\
	- intValue:\
	- floatValue\
	- floatValue:\
	- asScalar\
	- asSymbol\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Identity}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- scalar\
	- termOne\
	- isMonic\
	- isVariableSparse\
	- isVariableDense\
	- degree\
	- numTerms\
	- isTerm\
	- isEqual:\
	- hash\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Variable Ordering}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- symbols\
	- isOrderDegreeCompatible\
	- isOrderReverseDegreeCompatible\
	- compareTerms:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Inserting and Removing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- removeTerm\
	- insertTerm:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Accessing Terms}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- eachTerm\
	- leadingTerm\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Addition}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- zero\
	- isZero\
	- negate\
	- double\
	- add:\
	- subtract:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Multiplication}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- one\
	- isOne\
	- isMinusOne\
	- square\
	- multiply:\
	- multiplyScalar:\
	- divideScalar:\
	- divide:\
	- divideTerms:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Greatest Common Divisor}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- gcd:\
	- lcm:\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Characteristic}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- frobenius\
	- frobeniusInverse\
\pard\fs16\
\
\pard\tx2600\fs28\li2600\cf0
{\b Printing}
\pard\tx6000\fs28\fi-3800\li6000\cf0
	- printsLeadingSign\
	- printsSum\
	- printsProduct\
	- printOn:\
\pard\fs16\
\
\fs16\
\
\f1\b\fs36\li1400 Methods\b0\f0\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 scalar:\f0\b0\
\f0\fs28\li2500 +{\b scalar}:{\i aScalar}\fs16\
\
\f0\fs28\li2200 Creates a new {\i variable sparse} monomial.  Sets the scalar equal to {\i aScalar}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 scalar:symbols:\f0\b0\
\f0\fs28\li2500 +{\b scalar}:{\i aScalar}{\b symbols}:{\i aCltn}\fs16\
\
\f0\fs28\li2200 Creates a new {\i variable dense} monomial.  Sets the scalar equal to {\i aScalar} and fixes the symbols to {\i aCltn}.  The collection of symbols must not be empty.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 empty\f0\b0\
\f0\fs28\li2500 -{\b empty}\fs16\
\
\f0\fs28\li2200 Creates a new monomial with scalar equal to one and empty sequence of terms.  The representation of the monomial is identical to that of the original monomial.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 copy\f0\b0\
\f0\fs28\li2500 -{\b copy}\fs16\
\
\f0\fs28\li2200 Makes a copy of the terms of the monomial.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 deepCopy\f0\b0\
\f0\fs28\li2500 -{\b deepCopy}\fs16\
\
\f0\fs28\li2200 Makes a deepCopy of the terms and the scalar of the monomial.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 intValue\f0\b0\
\f0\fs28\li2500 - (int){\b intValue}\fs16\
\
\f0\fs28\li2200 Returns the intValue of the scalar of the monomial, if all terms are trivial.  If not, generates an error message.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 intValue:\f0\b0\
\f0\fs28\li2500 -{\b intValue}:(int){\i aValue}\fs16\
\
\f0\fs28\li2200 Returns a new monomial with a scalar whose value as {\b int} is equal to {\i aValue}.  All terms in this monomial are trivial.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 floatValue\f0\b0\
\f0\fs28\li2500 - (float){\b floatValue}\fs16\
\
\f0\fs28\li2200 Returns the floatValue of the scalar of the monomial, if all terms are trivial.  If not, generates an error message.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 floatValue:\f0\b0\
\f0\fs28\li2500 -{\b floatValue}:(float){\i aValue}\fs16\
\
\f0\fs28\li2200 Returns a new monomial with a scalar whose value as {\b float} is equal to {\i aValue}.  All terms in this monomial are trivial.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 asScalar\f0\b0\
\f0\fs28\li2500 -{\b asScalar}\fs16\
\
\f0\fs28\li2200 Returns, if all the terms in the monomial are trivial (have exponent equal to zero), a new reference to the scalar of the monomial.  Otherwise returns {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 asSymbol\f0\b0\
\f0\fs28\li2500 -{\b asSymbol}\fs16\
\
\f0\fs28\li2200 Returns, if the scalar of the monomial is equal to one and if the monomial contains exactly one term whose exponent is equal to one, a new reference to the symbol of that term.  Otherwise returns {\b nil}.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 scalar\f0\b0\
\f0\fs28\li2500 -{\b scalar}\fs16\
\
\f0\fs28\li2200 Returns the scalar of the monomial. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 termOne\f0\b0\
\f0\fs28\li2500 -{\b termOne}\fs16\
\
\f0\fs28\li2200 Returns the trivial term.  \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isMonic\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isMonic}\fs16\
\
\f0\fs28\li2200 Returns YES if the scalar of the monomial is equal to one.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isVariableSparse\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isVariableSparse}\fs16\
\
\f0\fs28\li2200 Returns YES if the terms of the monomial are variable sparse i.e., whether symbols raised to exponent zero are ignored and whether the collection of allowed symbols is dynamically adjusted when terms are inserted.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isVariableDense\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isVariableDense}\fs16\
\
\f0\fs28\li2200 Returns YES if the terms of the monomial are variable dense i.e., whether symbols raised to exponent zero are stored and whether the collection of allowed symbols is fixed.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 degree\f0\b0\
\f0\fs28\li2500 - (int){\b degree}\fs16\
\
\f0\fs28\li2200 Returns the sum of the exponents of the terms in the monomial.  Returns minus one if the monomial is equal to zero.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 numTerms\f0\b0\
\f0\fs28\li2500 - (int){\b numTerms}\fs16\
\
\f0\fs28\li2200 Returns the number of terms with non-zero exponent in the monomial.  The total number of terms in a variable dense monomial is equal to the number of symbols.  Note that {\b eachTerm} returns a sequence of all terms, trivial or not. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isTerm\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isTerm}\fs16\
\
\f0\fs28\li2200 Whether the monomial consists of a single term.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isEqual:\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isEqual}:{\i aMonomial}\fs16\
\
\f0\fs28\li2200 Returns YES if the scalars and the terms of the monomial are equal to each other.  The monomials must be in the same representation.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 hash\f0\b0\
\f0\fs28\li2500 - (unsigned){\b hash}\fs16\
\
\f0\fs28\li2200 Returns a hash value for the monomial.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 symbols\f0\b0\
\f0\fs28\li2500 -{\b symbols}\fs16\
\
\f0\fs28\li2200 Returns a collection of symbols.  If the monomial is variable dense, beware that some symbols may occur with a zero exponent in the monomial.  If the monomial is variable sparse, this method returns an alphabetically sorted collection of all the symbols that occur in the monomial with non-zero exponent.  Don' modify the collection returned by this method; do not attempt to insert new symbols, or change their order.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isOrderDegreeCompatible\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isOrderDegreeCompatible}\fs16\
\
\f0\fs28\li2200 Should return YES if, when the monomial {\i a} is less than the monomial {\i b}, the degree of {\i a} is less than the degree of {\i b}.  Currently, the order is degree compatible only for univariate, variable dense monomials. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isOrderReverseDegreeCompatible\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isOrderReverseDegreeCompatible}\fs16\
\
\f0\fs28\li2200 Should return YES if, when the monomial {\i a} is less than the monomial {\i b}, the degree of {\i a} is greater than the degree of {\i b}.  Currently, there is no such order. \fs16\
\
\fs16\
\
\f1\b\fs28\li2200 compareTerms:\f0\b0\
\f0\fs28\li2500 - (int){\b compareTerms}:{\i aMonomial}\fs16\
\
\f0\fs28\li2200 Compares the terms (symbols and exponents) of the monomials; the scalars of the monomials are not taken into account.  Returns zero if the symbols and exponents of the terms are equal; returns -1 if the monomial is less than {\i aMonomial}, and +1 if it is greater than {\i aMonomial}.\fs16\
\
\f0\fs28\li2200 If the monomials are variable dense, the first symbol in the collection of symbols is taken to be smaller than symbols with higher index in the array of symbols.  This method compares with respect to the lexicographic order : it starts comparing the smallest symbols, and as long as exponents are equal, it works towards larger symbols (those at the end of the collection of symbols).\fs16\
\
\f0\fs28\li2200 If the monomials are variable sparse, the method also compares lexicographically, but now the smallest symbol, is the one that is smallest with respect to Symbol's {\b compare:}.  If the collection of symbols for a variable dense monomial is ordered alphabetically, the variable sparse and variable dense orderings coincide.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 removeTerm\f0\b0\
\f0\fs28\li2500 -{\b removeTerm}\fs16\
\
\f0\fs28\li2200 Removes the leading term (first term with non-zero exponent) of the monomial or returns {\b nil} if there is no such term.  The coefficient of this term is equal to one.  The reference count of the monomial must be equal to one.\fs16\
\
\f0\fs28\li2200 {\b {\f1 See also:}} leadingTerm, eachTerm\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 insertTerm:\f0\b0\
\f0\fs28\li2500 -{\b insertTerm}:{\i aTerm}\fs16\
\
\f0\fs28\li2200 Inserts {\i aTerm} in the product of terms and returns {\b self}.  The reference count of the monomial must be equal to one.\fs16\
\
\f0\fs28\li2200 If the coefficient of the term is zero, this method empties the sequence of terms and sets the scalar to zero, as if the monomial were multiplied by zero.  Otherwise, the methods multiplies the coefficient of the term and the scalar of the monomial together, and, if the monomial doesn't contain a term with symbol equal to that of {\i aTerm}, the method inserts a (monic) term in the ordered sequence of terms.  If there is a term in the same symbol, the method adds the exponent of {\i aTerm} to it.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 eachTerm\f0\b0\
\f0\fs28\li2500 -{\b eachTerm}\fs16\
\
\f0\fs28\li2200 Returns a sequence of terms.  The coefficient of each term is equal to one.  The scalar of the monomial itself is obtained by sending {\b scalar} to the monomial.  If the monomial is variable dense, the sequence also contains the terms whose exponent is equal to zero.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 leadingTerm\f0\b0\
\f0\fs28\li2500 -{\b leadingTerm}\fs16\
\
\f0\fs28\li2200 Returns the leading term of the monomial i.e., the first term with a non-zero exponent.  The coefficient of this term is equal to one.  Returns {\b nil} if there is no such term in the monomial.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 zero\f0\b0\
\f0\fs28\li2500 -{\b zero}\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isZero\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isZero}\fs16\
\
\f0\fs28\li2200 Returns YES if the scalar object is zero.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 negate\f0\b0\
\f0\fs28\li2500 -{\b negate}\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 double\f0\b0\
\f0\fs28\li2500 -{\b double}\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 add:\f0\b0\
\f0\fs28\li2500 -{\b add}:{\i b}\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 subtract:\f0\b0\
\f0\fs28\li2500 -{\b subtract}:{\i b}\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 one\f0\b0\
\f0\fs28\li2500 -{\b one}\fs16\
\
\f0\fs28\li2200 Returns a monomial with scalar equal to one and containing no (nontrivial) terms.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isOne\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isOne}\fs16\
\
\f0\fs28\li2200 Whether there are only trivial terms and the scalar is equal to one.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 isMinusOne\f0\b0\
\f0\fs28\li2500 - (BOOL){\b isMinusOne}\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 square\f0\b0\
\f0\fs28\li2500 -{\b square}\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 multiply:\f0\b0\
\f0\fs28\li2500 -{\b multiply}:{\i b}\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 multiplyScalar:\f0\b0\
\f0\fs28\li2500 -{\b multiplyScalar}:{\i s}\fs16\
\
\f0\fs28\li2200 Multiplies the scalar of the monomial by {\i s} and copies the terms.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 divideScalar:\f0\b0\
\f0\fs28\li2500 -{\b divideScalar}:{\i s}\fs16\
\
\f0\fs28\li2200 Divides scalar by {\i s} and copies terms.  Returns {\b nil} if the division fails or if it's not exact.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 divide:\f0\b0\
\f0\fs28\li2500 -{\b divide}:{\i aMonomial}\fs16\
\
\f0\fs28\li2200 Divides the scalars and the terms of the monomials.  Returns {\b nil} if either of the scalar or term division is not exact.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 divideTerms:\f0\b0\
\f0\fs28\li2500 -{\b divideTerms}:{\i aMonomial}\fs16\
\
\f0\fs28\li2200 Divides the terms of the monomials by the terms of {\i aMonomial}.  Returns a new monomial with scalar equal to the scalar of the dividend.  Returns {\b nil} if the division of terms is not exact.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 gcd:\f0\b0\
\f0\fs28\li2500 -{\b gcd}:{\i aMonomial}\fs16\
\
\f0\fs28\li2200 Returns a new monomial that is the {\i monic} greatest common divisor of the monomials, ie. the greatest common divisor of the terms of the monomials.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 lcm:\f0\b0\
\f0\fs28\li2500 -{\b lcm}:{\i aMonomial}\fs16\
\
\f0\fs28\li2200 Returns a new monomial that is the {\i monic} least common multiple of the monomials, ie. the least common multiple of the terms of the monomials.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 frobenius\f0\b0\
\f0\fs28\li2500 -{\b frobenius}\fs16\
\
\f0\fs28\li2200 Returns a new monomial by sending a {\b frobenius} message to the scalar of the monomial and by raising the terms in the monomial to the {\i p}-th power ({\i p} is equal to the scalar's characteristic).\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 frobeniusInverse\f0\b0\
\f0\fs28\li2500 -{\b frobeniusInverse}\fs16\
\
\f0\fs28\li2200 Returns a new monomial by sending a {\b frobeniusInverse} message to the scalar of the monomial and by extracting the {\i p}-th root of the terms in the monomial to a power (where {\i p} is equal to the scalar's characteristic).  Returns {\b nil} if the monomial is not a {\i p}-th power.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 printsLeadingSign\f0\b0\
\f0\fs28\li2500 - (BOOL){\b printsLeadingSign}\fs16\
\
\f0\fs28\li2200 Whether the monomial prints a leading minus sign.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 printsSum\f0\b0\
\f0\fs28\li2500 - (BOOL){\b printsSum}\fs16\
\
\f0\fs28\li2200 Whether the monomial prints a sum.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 printsProduct\f0\b0\
\f0\fs28\li2500 - (BOOL){\b printsProduct}\fs16\
\
\f0\fs28\li2200 Whether the monomial prints a single product.\fs16\
\
\fs16\
\
\f1\b\fs28\li2200 printOn:\f0\b0\
\f0\fs28\li2500 -{\b printOn}:(IOD){\i aFile}\fs16\
\
\f0\fs28\li2200 Prints the monomial to {\i aFile} by sending {\b printOn:} to the scalar and terms.\fs16\
\
\fs16\
\
\
}
