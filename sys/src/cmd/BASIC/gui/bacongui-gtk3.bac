'------------------------------------------------------------------------
' A minimal editor for the BaCon BASIC-to-C converter based on GTK3.
'
' Peter van Eerten - February 2023. License: MIT License.
'------------------------------------------------------------------------

OPTION GUI TRUE
PRAGMA GUI gtk3

OPTION EXPLICIT TRUE

' Using GtkSourceView: apt install libgtksourceview-4-dev
PRAGMA INCLUDE <gtksourceview/gtksource.h>
PRAGMA OPTIONS `pkg-config --cflags gtksourceview-4`
PRAGMA LDFLAGS `pkg-config --libs gtksourceview-4`

' Using libwebkit2gtk: apt install libwebkit2gtk-4.0-dev
PRAGMA INCLUDE <webkit2/webkit2.h>
PRAGMA OPTIONS `pkg-config --cflags webkit2gtk-4.0`
PRAGMA LDFLAGS `pkg-config --libs webkit2gtk-4.0`

LOCAL window, mode

window = GUIDEFINE(" \
	{ type=WINDOW name=window callback=delete-event title=\"The BaCon Editor\" window-position=GTK_WIN_POS_CENTER width-request=900 height-request=600 } \
	{ type=BOX name=box parent=window orientation=GTK_ORIENTATION_VERTICAL } \
	{ type=MENU_BAR name=menu parent=box } \
	{ type=MENU name=filemenu } \
	{ type=MENU_ITEM name=open_file parent=filemenu callback=activate use-underline=1 label=\"_Open...\" } \
	{ type=MENU_ITEM name=close_file parent=filemenu callback=activate use-underline=1 label=\"_Close\" } \
	{ type=MENU_ITEM name=store_file parent=filemenu callback=activate use-underline=1 label=\"_Save\" } \
	{ type=MENU_ITEM name=save_file parent=filemenu callback=activate use-underline=1 label=\"S_ave as...\" } \
	{ type=SEPARATOR_MENU_ITEM name=sep1 parent=filemenu } \
	{ type=MENU_ITEM name=clone_me parent=filemenu callback=activate use-underline=1 label=\"C_lone me\" } \
	{ type=SEPARATOR_MENU_ITEM name=sep2 parent=filemenu } \
	{ type=MENU_ITEM name=export_text parent=filemenu callback=activate use-underline=1 label=\"_HTML export\" } \
	{ type=SEPARATOR_MENU_ITEM name=sep3 parent=filemenu } \
	{ type=MENU_ITEM name=exit_menu parent=filemenu callback=activate use-underline=1 label=\"E_xit\" } \
	{ type=MENU_ITEM name=menu1 parent=menu use-underline=1 label=\"_File\" submenu=filemenu } \
	{ type=MENU name=configmenu } \
	{ type=MENU_ITEM name=exec_menu parent=configmenu callback=activate use-underline=1 label=\"_Execute\" } \
	{ type=SEPARATOR_MENU_ITEM name=sep4 parent=configmenu } \
	{ type=CHECK_MENU_ITEM name=nr_menu parent=configmenu callback=activate use-underline=1 label=\"Line _Numbers\" active=TRUE } \
	{ type=SEPARATOR_MENU_ITEM name=sep5 parent=configmenu } \
	{ type=MENU_ITEM name=indent parent=configmenu callback=activate use-underline=1 label=\"Indent Code\" } \
	{ type=SEPARATOR_MENU_ITEM name=sep6 parent=configmenu } \
	{ type=MENU_ITEM name=scratch_pad parent=configmenu callback=activate use-underline=1 label=\"_Scratchpad\" } \
	{ type=MENU_ITEM name=menu2 parent=menu use-underline=1 label=\"_Tools\" submenu=configmenu } \
	{ type=MENU name=helpmenu } \
	{ type=MENU_ITEM name=doc_menu parent=helpmenu callback=activate use-underline=1 label=\"_Documentation\" } \
	{ type=MENU_ITEM name=con_menu parent=helpmenu callback=activate use-underline=1 label=\"Context _Info\" } \
	{ type=SEPARATOR_MENU_ITEM name=sep7 parent=helpmenu } \
	{ type=MENU_ITEM name=about_menu parent=helpmenu callback=activate use-underline=1 label=\"_About\" } \
	{ type=MENU_ITEM name=menu3 parent=menu use-underline=1 label=\"_Help\" submenu=helpmenu right-justified=1 } \
	{ type=SCROLLED_WINDOW name=scrolled parent=box shadow-type=1 height-request=400 } \
	{ type=GTK_SOURCE_TYPE_VIEW name=view parent=scrolled wrap-mode=GTK_WRAP_NONE vexpand=1 monospace=1 tab-width=4 show-line-numbers=1 } \
	{ type=WINDOW name=file_dialog callback=delete-event title=\"Open File\" window-position=GTK_WIN_POS_CENTER width-request=800 height-request=500 } \
	{ type=BOX name=file_box parent=file_dialog orientation=GTK_ORIENTATION_VERTICAL } \
	{ type=FILE_CHOOSER_WIDGET name=filechooser parent=file_box action=GTK_FILE_CHOOSER_ACTION_OPEN } \
	{ type=BUTTON_BOX name=file_bbox parent=file_box layout-style=GTK_BUTTONBOX_EDGE } \
	{ type=BUTTON name=file_cancel parent=file_bbox callback=clicked margin=5 label=\"gtk-cancel\" use-stock=1 } \
	{ type=BUTTON name=file_open parent=file_bbox callback=clicked margin=5 label=\"gtk-open\" use-stock=1 } \
	{ type=WINDOW name=save_dialog callback=delete-event title=\"Save File\" window-position=GTK_WIN_POS_CENTER width-request=800 height-request=500 } \
	{ type=BOX name=save_box parent=save_dialog orientation=GTK_ORIENTATION_VERTICAL } \
	{ type=FILE_CHOOSER_WIDGET name=savechooser parent=save_box action=GTK_FILE_CHOOSER_ACTION_SAVE } \
	{ type=BUTTON_BOX name=save_bbox parent=save_box layout-style=GTK_BUTTONBOX_EDGE } \
	{ type=BUTTON name=save_cancel parent=save_bbox callback=clicked margin=5 label=\"gtk-cancel\" use-stock=1 } \
	{ type=BUTTON name=save_open parent=save_bbox callback=clicked margin=5 label=\"gtk-save\" use-stock=1 } \
	{ type=WINDOW name=scratch_dialog callback=delete-event title=\"BaCon Scratchpad\" window-position=GTK_WIN_POS_CENTER width-request=500 height-request=300 } \
	{ type=BOX name=scratch_box parent=scratch_dialog orientation=GTK_ORIENTATION_VERTICAL } \
	{ type=SCROLLED_WINDOW name=scratch_swin parent=scratch_box expand=TRUE margin=5 valign=GTK_ALIGN_BASELINE shadow-type=GTK_SHADOW_ETCHED_IN } \
	{ type=GTK_SOURCE_TYPE_VIEW name=scratch_view parent=scratch_swin wrap-mode=GTK_WRAP_NONE vexpand=1 monospace=1 tab-width=4 } \
	{ type=BUTTON_BOX name=scratch_bbox parent=scratch_box layout-style=GTK_BUTTONBOX_EDGE } \
	{ type=BUTTON name=scratch_cancel parent=scratch_bbox callback=clicked margin=5 label=\"gtk-cancel\" use-stock=1 } \
	{ type=BUTTON name=scratch_run parent=scratch_bbox callback=clicked margin=5 label=\"gtk-execute\" use-stock=1 } \
	{ type=WINDOW name=exec_dialog callback=delete-event title=\"Compile and Execute\" window-position=GTK_WIN_POS_CENTER width-request=500 } \
	{ type=BOX name=exec_box parent=exec_dialog orientation=GTK_ORIENTATION_VERTICAL } \
	{ type=BOX name=exec_hbox parent=exec_box orientation=GTK_ORIENTATION_HORIZONTAL } \
	{ type=LABEL name=exec_label parent=exec_hbox margin=5 label=\"Convert command: \" } \
	{ type=ENTRY name=exec_entry parent=exec_hbox margin=5 hexpand=1 text=\"xterm -sb -geometry 132x40 -e 'bacon -r @; read x'\" } \
	{ type=BUTTON_BOX name=exec_bbox parent=exec_box layout-style=GTK_BUTTONBOX_EDGE } \
	{ type=BUTTON name=exec_cancel parent=exec_bbox callback=clicked margin=5 label=\"gtk-cancel\" use-stock=1 } \
	{ type=BUTTON name=exec_run parent=exec_bbox callback=clicked margin=5 label=\"gtk-execute\" use-stock=1 } \
	{ type=WINDOW name=doc_dialog callback=delete-event title=\"BaCon Documentation\" window-position=GTK_WIN_POS_NONE } \
	{ type=BOX name=doc_box parent=doc_dialog orientation=GTK_ORIENTATION_VERTICAL } \
	{ type=WEBKIT_TYPE_WEB_VIEW name=web_view parent=doc_box width-request=1024 height-request=600 expand=TRUE } \
	{ type=BUTTON_BOX name=doc_bbox parent=doc_box layout-style=GTK_BUTTONBOX_CENTER } \
	{ type=BUTTON name=doc_close parent=doc_bbox callback=clicked margin=5 label=\"gtk-close\" use-stock=TRUE } \
	{ type=MESSAGE_DIALOG name=about_dialog callback=response message-type=GTK_MESSAGE_INFO buttons=GTK_BUTTONS_CLOSE title=\"About This Editor\" text=\"\\nA Minimal BaCon Editor in GTK3!\\n\\n  (c) 2023 Peter van Eerten\" }")

CONST Scratch_Temp$ = "/tmp/scratchpad.bac"

LOCAL file TYPE STRING
LOCAL current_name$, command$

LOCAL (*show)() = gtk_widget_show_all TYPE void
LOCAL (*hide)() = gtk_widget_hide TYPE void

LOCAL start_iter, end_iter TYPE GtkTextIter
LOCAL *buffer, *sbuffer TYPE GtkTextBuffer
LOCAL *dialog TYPE GtkWidget
LOCAL *group TYPE GtkAccelGroup

CALL GUIGET(window, "view", "buffer", &buffer)
CALL GUIGET(window, "scratch_view", "buffer", &sbuffer)

' Set syntax highlighting to BaCon
CALL gtk_source_buffer_set_language(GTK_SOURCE_BUFFER(buffer), gtk_source_language_manager_get_language(gtk_source_language_manager_get_default(), "bacon") )
CALL gtk_source_buffer_set_language(GTK_SOURCE_BUFFER(sbuffer), gtk_source_language_manager_get_language(gtk_source_language_manager_get_default(), "bacon") )

' Keyboard shortcuts
CALL gtk_accel_group_new() TO group
CALL gtk_window_add_accel_group(GTK_WINDOW(GUIWIDGET(window, "window")), group)
CALL gtk_widget_add_accelerator(GUIWIDGET(window, "con_menu"), "activate", group, gdk_keyval_from_name("i"), GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE)
CALL gtk_widget_add_accelerator(GUIWIDGET(window, "exec_menu"), "activate", group, gdk_keyval_from_name("e"), GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE)
CALL gtk_widget_add_accelerator(GUIWIDGET(window, "open_file"), "activate", group, gdk_keyval_from_name("o"), GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE)
CALL gtk_widget_add_accelerator(GUIWIDGET(window, "store_file"), "activate", group, gdk_keyval_from_name("s"), GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE)
CALL gtk_widget_add_accelerator(GUIWIDGET(window, "indent"), "activate", group, gdk_keyval_from_name("m"), GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE)

' Create ad-hoc dialogue for user interaction
FUNC Dialog_Feedback(id$, msg$)
	dialog = gtk_message_dialog_new(GTK_WINDOW(GUIWIDGET(window, id$)), GTK_DIALOG_MODAL|GTK_DIALOG_DESTROY_WITH_PARENT, GTK_MESSAGE_QUESTION, GTK_BUTTONS_YES_NO, "%s", msg$)
	IF gtk_dialog_run(GTK_DIALOG(dialog)) = GTK_RESPONSE_NO THEN
		CALL gtk_widget_destroy(dialog)
		RETURN TRUE
	FI
	CALL gtk_widget_destroy(dialog)
	RETURN FALSE
ENDFUNC

' Indentation code taken from BaCon source
FUNC Indent_Prog$(text$)
	LOCAL result$, line$, previous$
	LOCAL myposition, nextposition, label_active, wrap_active, total, x
	SPLIT text$ BY NL$ TO lines$ SIZE total
	FOR x = 0 TO total-1
		myposition = nextposition
		lines$[x] = CHOP$(lines$[x])
		IF LEN(lines$[x]) = 0 AND label_active THEN
			label_active = FALSE
			DECR myposition
			nextposition = myposition
		ENDIF
		IF REGEX(lines$[x], "^(CASE|UNTIL)[ \\t]|^(DEFAULT|FI|NEXT|WEND|DONE)|^ELSE$|^ELIF.+THEN$|^END.+") THEN
			IF NOT(REGEX(lines$[x], "^END.+[0-9]+")) THEN DECR myposition
			IF REGEX(lines$[x], "SELECT$") THEN DECR myposition
			IF myposition < 0 THEN myposition = 0
			nextposition = myposition
		ENDIF
		IF REGEX(lines$[x], "^(CASE|ENUM|FOR|FUNCTION|FUNC|GLOBAL RECORD|LABEL|RECORD|SELECT|SUB|WHILE|DOTIMES|WITH)[ \\t]|^(DEFAULT|REPEAT|USEC|USEH|DO$)|^IF.+THEN$|^ELIF.+THEN$|^ELSE$") THEN
			INCR nextposition
			IF REGEX(lines$[x], "^SELECT") THEN INCR nextposition
			IF LEFT$(lines$[x], 5) = "LABEL" THEN label_active = TRUE
		ENDIF
		IF RIGHT$(lines$[x], 2) = CHR$(32) & CHR$(92) AND NOT(REGEX(lines$[x], "^(REM|')")) THEN
			IF NOT(wrap_active) THEN INCR nextposition
			wrap_active = TRUE
		ELSE
			IF wrap_active THEN DECR nextposition
			wrap_active = FALSE
		ENDIF
		IF REGEX(previous$, "^(REM|')") THEN result$ = CHANGE$(result$, x, TAB$(myposition) & previous$, NL$)
		IF LEN(lines$[x]) THEN
			result$ = result$ & TAB$(myposition) & lines$[x] & NL$
		ELSE
			result$ = result$ & NL$
		ENDIF
		previous$ = lines$[x]
	NEXT
	RETURN result$
ENDFUNC

' Endless loop
WHILE TRUE
	SELECT GUIEVENT$(window)
		CASE "window", "exit_menu"
			IF gtk_text_buffer_get_modified(buffer) AND Dialog_Feedback("file_dialog", "\nDiscard current changes?") THEN CONTINUE
			BREAK
		CASE "open_file"
			CALL GUIFN(window, "file_dialog", show)
		CASE "close_file"
			IF gtk_text_buffer_get_modified(buffer) AND Dialog_Feedback("file_dialog", "\nDiscard current changes?") THEN CONTINUE
			CALL gtk_text_buffer_set_text(buffer, "", -1)
			CALL gtk_text_buffer_set_modified(buffer, FALSE)
		CASE "save_file"
			CALL GUIFN(window, "save_dialog", show)
		CASE "export_text"
			IF NOT(LEN(EXEC$("which enscript 2>/dev/null"))) OR NOT(LEN(current_name$)) THEN
				dialog = gtk_message_dialog_new(GTK_WINDOW(GUIWIDGET(window, "window")), GTK_DIALOG_MODAL|GTK_DIALOG_DESTROY_WITH_PARENT, GTK_MESSAGE_ERROR, GTK_BUTTONS_CLOSE, "\nThe 'enscript' utility fails!")
				CALL gtk_dialog_run(GTK_DIALOG(dialog))
				CALL gtk_widget_destroy(dialog)
			ELSE
				SYSTEM "enscript --tabsize=4 --color --language=html --highlight=bacon --title=" & current_name$ & " --output=" & current_name$ & ".html " & current_name$
				dialog = gtk_message_dialog_new(GTK_WINDOW(GUIWIDGET(window, "window")), GTK_DIALOG_MODAL|GTK_DIALOG_DESTROY_WITH_PARENT, GTK_MESSAGE_INFO, GTK_BUTTONS_CLOSE, "\nHTML generated.")
				CALL gtk_dialog_run(GTK_DIALOG(dialog))
				CALL gtk_widget_destroy(dialog)
			ENDIF
		CASE "file_dialog", "file_cancel"
			CALL GUIFN(window, "file_dialog", hide)
		CASE "save_dialog", "save_cancel"
			CALL GUIFN(window, "save_dialog", hide)
		CASE "file_open"
			IF gtk_text_buffer_get_modified(buffer) AND Dialog_Feedback("file_dialog", "\nDiscard current changes?") THEN CONTINUE
			file = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(GUIWIDGET(window, "filechooser")))
			CALL gtk_text_buffer_set_text(buffer, LOAD$(file), -1)
			CALL GUIFN(window, "file_dialog", hide)
			CALL gtk_text_buffer_set_modified(buffer, FALSE)
			CALL GUISET(window, "window", "title", "The BaCon Editor - '" & BASENAME$(file) & "'")
			CHANGEDIR DIRNAME$(file)
			current_name$ = BASENAME$(file)
			FREE file
		CASE "store_file"
			IF NOT(LEN(current_name$)) THEN
				dialog = gtk_message_dialog_new(GTK_WINDOW(GUIWIDGET(window, "window")), GTK_DIALOG_MODAL|GTK_DIALOG_DESTROY_WITH_PARENT, GTK_MESSAGE_INFO, GTK_BUTTONS_OK, "\nSave program first!")
				CALL gtk_dialog_run(GTK_DIALOG(dialog))
				CALL gtk_widget_destroy(dialog)
			ELSE
				CALL gtk_text_buffer_get_bounds(buffer, &start_iter, &end_iter)
				SAVE gtk_text_buffer_get_text(buffer, &start_iter, &end_iter, TRUE) TO current_name$
				CALL gtk_text_buffer_set_modified(buffer, FALSE)
			ENDIF
		CASE "save_open"
			file = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(GUIWIDGET(window, "savechooser")))
			IF FILEEXISTS(file) AND Dialog_Feedback("save_dialog", "\nAre you sure to overwrite?") THEN CONTINUE
			CALL gtk_text_buffer_get_bounds(buffer, &start_iter, &end_iter)
			SAVE gtk_text_buffer_get_text(buffer, &start_iter, &end_iter, TRUE) TO file
			CALL GUIFN(window, "save_dialog", hide)
			CALL gtk_text_buffer_set_modified(buffer, FALSE)
			CHANGEDIR DIRNAME$(file)
			current_name$ = BASENAME$(file)
			FREE file
		CASE "clone_me"
			SYSTEM ME$ & " &"
		CASE "scratch_pad"
			CALL GUIFN(window, "scratch_dialog", show)
		CASE "scratch_dialog", "scratch_cancel"
			CALL GUIFN(window, "scratch_dialog", hide)
		CASE "scratch_run"
			CALL gtk_text_buffer_get_bounds(sbuffer, &start_iter, &end_iter)
			SAVE gtk_text_buffer_get_text(sbuffer, &start_iter, &end_iter, TRUE) TO Scratch_Temp$
			command$ = gtk_entry_get_text(GTK_ENTRY(GUIWIDGET(window, "exec_entry")))
			SYSTEM REPLACE$(command$, "@", Scratch_Temp$)
		CASE "exec_menu"
			CALL GUIFN(window, "exec_dialog", show)
			CALL gtk_editable_set_position(GTK_EDITABLE(GUIWIDGET(window, "exec_entry")), -1)
			CALL gtk_widget_grab_focus(GUIWIDGET(window, "exec_run"))
		CASE "exec_run"
			IF NOT(LEN(current_name$)) THEN
				dialog = gtk_message_dialog_new(GTK_WINDOW(GUIWIDGET(window, "window")), GTK_DIALOG_MODAL|GTK_DIALOG_DESTROY_WITH_PARENT, GTK_MESSAGE_INFO, GTK_BUTTONS_OK, "\nSave program first!")
				CALL gtk_dialog_run(GTK_DIALOG(dialog))
				CALL gtk_widget_destroy(dialog)
			ELSE
				CALL gtk_text_buffer_get_bounds(buffer, &start_iter, &end_iter)
				SAVE gtk_text_buffer_get_text(buffer, &start_iter, &end_iter, TRUE) TO current_name$
				CALL gtk_text_buffer_set_modified(buffer, FALSE)
				command$ = gtk_entry_get_text(GTK_ENTRY(GUIWIDGET(window, "exec_entry")))
				SYSTEM REPLACE$(command$, "@", current_name$)
			ENDIF
			CALL GUIFN(window, "exec_dialog", hide)
		CASE "exec_dialog", "exec_cancel"
			CALL GUIFN(window, "exec_dialog", hide)
		CASE "con_menu"
			CALL gtk_text_buffer_get_iter_at_mark(buffer, &start_iter, gtk_text_buffer_get_insert(buffer))
			CALL gtk_text_buffer_get_iter_at_mark(buffer, &end_iter, gtk_text_buffer_get_insert(buffer))
			IF NOT(gtk_text_iter_starts_word(&start_iter)) THEN CALL gtk_text_iter_backward_word_start(&start_iter)
			IF NOT(gtk_text_iter_ends_word(&end_iter)) THEN CALL gtk_text_iter_forward_word_end(&end_iter)
			CALL gtk_text_iter_forward_visible_cursor_position(&end_iter)
			CALL webkit_web_view_load_uri((WebKitWebView*)GUIWIDGET(window, "web_view"), "file://" & CONCAT$(DATA_PATH, "/BaCon/documentation/documentation.html") & "#" & UCASE$(CHOP$(gtk_text_buffer_get_text(buffer, &start_iter, &end_iter, 1), " (")))
			CALL GUIFN(window, "doc_dialog", show)
		CASE "doc_menu"
			CALL webkit_web_view_load_uri((WebKitWebView*)GUIWIDGET(window, "web_view"), "file://" & CONCAT$(DATA_PATH, "/BaCon/documentation/doc_frame.html"))
			CALL GUIFN(window, "doc_dialog", show)
		CASE "doc_dialog", "doc_close"
			CALL GUIFN(window, "doc_dialog", hide)
		CASE "about_menu"
			CALL GUIFN(window, "about_dialog", show)
		CASE "about_dialog"
			CALL GUIFN(window, "about_dialog", hide)
		CASE "nr_menu"
			CALL GUIGET(window, "nr_menu", "active", &mode)
			CALL GUISET(window, "view", "show-line-numbers", mode)
		CASE "indent"
			CALL gtk_text_buffer_get_bounds(buffer, &start_iter, &end_iter)
			CALL gtk_text_buffer_set_text(buffer, Indent_Prog$(gtk_text_buffer_get_text(buffer, &start_iter, &end_iter, TRUE)), -1)
	ENDSELECT
WEND
